// Generated by CoffeeScript 1.6.1
(function() {
  var Attribute, Browser, BrowserView, CartographicSurface, ColorPicker, Comment, Connection, Datom, DatomView, Emitter, Entity, EntityView, Enum, EnumView, Explorer, Model, Namespace, NamespaceView, Note, NoteView, Query, QueryView, Record, Resource, Rules, RulesView, S4, Schema, Sketch, SketchView, Transact, TransactView, Widget, bling, cardinalityTypes, checkbox, comboInput, dbCombo, guid, keyHandler, kosherName, labelPair, nameInput, oneOrManyToggle, regex, sketch, textAreaInput, textInput, textarea, typeCombo, types, uniqueCombo, uniqueTypes, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  bling = false[0], CartographicSurface = false[1];

  _ = require("component-underscore");

  Emitter = require("component-emitter");

  sketch = require("shaunxcode-sketch");

  ColorPicker = require("component-color-picker");

  window.edn = require("shaunxcode-jsedn");

  String.prototype.$tag = function(args) {
    return $("<" + this + "/>", args);
  };

  String.prototype.upperCaseFirst = function() {
    return this[0].toUpperCase() + this.slice(1);
  };

  kosherName = function(name) {
    if (name == null) {
      name = "";
    }
    return name.replace(/[\?\-\:\/\.]/g, "_");
  };

  S4 = function() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
  };

  guid = function() {
    return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
  };

  window.Storage = {
    get: function(key, defVal) {
      var parsed, val;
      val = localStorage.getItem(key);
      if (!val) {
        val = defVal;
      }
      try {
        parsed = JSON.parse(val);
        return parsed;
      } catch (e) {
        return val;
      }
    },
    set: function(key, val) {
      return localStorage.setItem(key, JSON.stringify(val));
    }
  };

  types = {
    ":db.type/keyword": "keyword",
    ":db.type/string": "string",
    ":db.type/boolean": "boolean",
    ":db.type/long": "long",
    ":db.type/bigint": "bigint",
    ":db.type/float": "float",
    ":db.type/double": "double",
    ":db.type/bigdec": "bigdec",
    ":db.type/ref": "ref",
    ":db.type/instant": "instant",
    ":db.type/uuid": "uuid",
    ":db.type/uri": "uri",
    ":db.type/bytes": "bytes"
  };

  uniqueTypes = {
    "nil": "no",
    ":db.unique/value": "value",
    ":db.unique/identity": "identity"
  };

  cardinalityTypes = {
    ":db.cardinality/one": 1,
    ":db.cardinality/many": "n"
  };

  keyHandler = function(keyMap) {
    return function(e) {
      var handler, key, _results;
      _results = [];
      for (key in keyMap) {
        handler = keyMap[key];
        if (e.keyCode === $.ui.keyCode[key]) {
          handler(e);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
  };

  textInput = function(model, field, validator, tag) {
    var curVal, self;
    if (tag == null) {
      tag = "input";
    }
    curVal = model.get(field);
    self = tag.$tag({
      "class": "textInput",
      value: curVal || ""
    }).on({
      blur: function(e) {
        var val;
        val = self.val().trim();
        model.set(field, val);
        return self.trigger("changedValue", self.val());
      },
      keyup: function(e) {
        return typeof validator === "function" ? validator(e, self) : void 0;
      }
    });
    if (model.get(":db/id")) {
      self.attr("disabled", true);
    }
    return self;
  };

  textAreaInput = function(model, field, validator) {
    return textInput(model, field, validator, "textarea");
  };

  nameInput = function(model, field) {
    var validator;
    validator = function(e, input) {
      if (e.keyCode === $.ui.keyCode.SPACE) {
        return input.val(input.val().replace(/\s/g, "_"));
      }
    };
    return textInput(model, field, validator).addClass("nameInput");
  };

  comboInput = function(options, model, field) {
    var optionTags, self, val, vis;
    optionTags = (function() {
      var _results;
      _results = [];
      for (val in options) {
        vis = options[val];
        _results.push("option".$tag({
          value: val,
          text: vis
        }));
      }
      return _results;
    })();
    self = "select".$tag({
      "class": "comboInput",
      html: optionTags
    }).on({
      change: function() {
        return model.set(field, $(this).val());
      }
    });
    if (model.get(field)) {
      self.val(model.get(field));
    } else {
      self.trigger("change");
    }
    return self;
  };

  typeCombo = function(model, field) {
    return (comboInput(types, model, field)).addClass("typeCombo");
  };

  uniqueCombo = function(model, field) {
    var options, self, val, vis;
    options = (function() {
      var _results;
      _results = [];
      for (val in uniqueTypes) {
        vis = uniqueTypes[val];
        _results.push("option".$tag({
          value: val,
          text: vis
        }));
      }
      return _results;
    })();
    self = "select".$tag({
      "class": "uniqueCombo",
      html: options
    }).on({
      change: function() {
        return model.set(field, self.val());
      }
    });
    if (model.get(field)) {
      self.val(model.get(field));
    }
    if (model.get(":db/id")) {
      self.attr("disabled", true);
    }
    return self;
  };

  checkbox = function(model, field) {
    var self;
    self = ("input".$tag({
      type: "checkbox"
    })).on({
      change: function() {
        return model.set(field, self.is(":checked"));
      }
    });
    if (model.get(field, false)) {
      self.attr("checked", true);
    }
    if (model.get(":db/id")) {
      self.attr("disabled", true);
    }
    return self;
  };

  textarea = function(model, field) {
    return bling("textarea", {
      value: model.get(field, "")
    });
  };

  labelPair = function(label, control) {
    return bling("div label." + label, function() {
      this.label.text("" + label + ":");
      return this.div.append(control);
    });
  };

  oneOrManyToggle = function(model, field) {
    var many, one, self, state;
    one = ":db.cardinality/one";
    many = ":db.cardinality/many";
    state = model.get(field, one);
    return self = "div".$tag({
      "class": "oneOrManyToggle",
      html: cardinalityTypes[state]
    }).on({
      click: function() {
        state = state === one ? many : one;
        self.text(cardinalityTypes[state]);
        return model.set(field, state);
      }
    });
  };

  dbCombo = function(model, field) {
    var cur, drawDbs, select;
    select = bling("select.dbCombo.loading");
    cur = model.get(field);
    drawDbs = function(cb) {
      select.html("");
      return DatomicIsm.connection.getStorages(function(storages) {
        var checkDone, count, storage, _i, _len, _results;
        count = storages.length;
        checkDone = function() {
          count--;
          if (count === 0) {
            return cb();
          }
        };
        _results = [];
        for (_i = 0, _len = storages.length; _i < _len; _i++) {
          storage = storages[_i];
          _results.push((function(storage) {
            var optGroup;
            optGroup = (bling("optgroup", {
              label: storage
            })).appendTo(select);
            return DatomicIsm.connection.getDatabases(storage, function(databases) {
              var database, _j, _len1;
              for (_j = 0, _len1 = databases.length; _j < _len1; _j++) {
                database = databases[_j];
                optGroup.bappend("option", {
                  value: "{:db/alias \"" + storage + "/" + database + "\"}",
                  text: database
                });
              }
              optGroup.bappend("option", {
                value: "new " + storage,
                text: "--new db--"
              });
              return checkDone();
            });
          })(storage));
        }
        return _results;
      });
    };
    select.on({
      change: function() {
        var $el, alias, isNew, name, _ref;
        $el = $(this);
        _ref = $el.val().split(" "), isNew = _ref[0], alias = _ref[1];
        if (isNew === "new") {
          if (name = prompt("DB Name")) {
            return DatomicIsm.connection.createDatabase(alias, name, function() {
              return drawDbs(function() {
                return select.val("{:db/alias \"" + alias + "/" + name + "\"}");
              });
            });
          }
        } else {
          model.set(field, $el.val());
          return select.trigger("changedValue", $el.val());
        }
      }
    });
    drawDbs(function() {
      if (cur) {
        select.val(cur);
      }
      return select.trigger("change");
    });
    return select;
  };

  Comment = (function() {

    function Comment(val) {
      this.val = val;
    }

    Comment.prototype.ednEncode = function() {
      return "\n ;; " + this.val;
    };

    return Comment;

  })();

  Model = (function() {

    function Model(data, _isNew) {
      this.data = data != null ? data : {};
      this._isNew = _isNew != null ? _isNew : true;
      this.id = guid();
      this.pendingChanges = {};
      if (typeof this.init === "function") {
        this.init();
      }
      Emitter.call(this);
    }

    Model.prototype.get = function(key, def) {
      var _base;
      if (def == null) {
        def = null;
      }
      return (_base = this.data)[key] || (_base[key] = def);
    };

    Model.prototype.set = function(key, val, force) {
      var cur, event;
      if (force == null) {
        force = false;
      }
      cur = this.data[key];
      if (_.isNumber(cur)) {
        val = Number(val);
      }
      if (cur !== val || force) {
        this.pendingChanges[key] = val;
        this.data[key] = val;
        event = {
          model: this,
          key: key,
          from: cur,
          to: val
        };
        this.emit("change", event);
        return this.emit("change:" + key, event);
      }
    };

    Model.prototype.update = function(newData) {
      var k, v;
      for (k in newData) {
        v = newData[k];
        this.set(k, v);
      }
      return this;
    };

    Model.prototype.isNew = function() {
      return this._isNew;
    };

    Model.prototype.hasPendingChanges = function() {
      return _.size(this.pendingChanges) > 0;
    };

    Model.prototype.description = function() {
      return this.get("widgetName", false);
    };

    Model.prototype.remove = function() {};

    return Model;

  })();

  Emitter(Model.prototype);

  Widget = (function() {

    Widget.prototype["class"] = "Widget";

    function Widget(model, id) {
      this.model = model;
      this.id = id;
      if (typeof this.init === "function") {
        this.init();
      }
      this.render();
      if (!this.id) {
        this.id = "widget" + (guid());
      }
    }

    Widget.prototype.sizeTitleBar = function() {
      return this.$widgetNameInput.css({
        width: this.$el.width() - (this.$handle.width() + this.$widgetButtons.width() + 40)
      });
    };

    Widget.prototype.render = function() {
      var pane, prct, self, _fn, _ref,
        _this = this;
      this.model.on("change", function() {
        return _this.saveState();
      });
      self = this;
      this.$el = bling(".widget." + this.className + " .handle .title, .widgetButtons", function() {
        self.$widget = this.widget.attr({
          id: self.id
        });
        self.$handleBar = this.handle;
        self.$handle = this.title.text(self.title);
        this.title.after(self.$widgetNameInput = textInput(self.model, "widgetName"));
        this.widget.draggable({
          handle: ".handle",
          containment: "parent"
        });
        this.widget.on("dragstop.Widget", function() {
          return self.saveState();
        });
        this.widget.on("resizestop.Widget", function() {
          return self.saveState();
        });
        return self.$widgetButtons = this.widgetButtons.bappend("button.close", function() {
          return self.$closeButton = this.close.text("x").on({
            click: function() {
              return self.close();
            }
          });
        });
      });
      this.$el.data("model", this.model);
      this.$el.data("view", this);
      this.$el.on("resize.Widget", function() {
        return _this.sizeTitleBar();
      });
      if (this.panes != null) {
        _ref = this.panes;
        _fn = function(pane, prct) {
          return _this.$el.append(_this["$" + pane] = bling("div"));
        };
        for (pane in _ref) {
          prct = _ref[pane];
          _fn(pane, prct);
        }
      }
      return this.$el.on({
        mousedown: function() {
          return _this.raiseToTop();
        },
        mouseenter: function() {
          _this.$closeButton.uncloak();
          return $(".ui-resizable-handle", _this.$el).uncloak();
        },
        mouseleave: function() {
          _this.$closeButton.cloak();
          return $(".ui-resizable-handle", _this.$el).cloak();
        }
      });
    };

    Widget.prototype.raiseToTop = function() {
      $(".widget").not("#" + this.id).not(".keepOnTop").css({
        zIndex: 1
      });
      return this.$el.css({
        zIndex: 2
      });
    };

    Widget.prototype.saveState = function() {
      var pos, widgets;
      pos = this.$el.position();
      widgets = Storage.get("widgets", {});
      widgets[this.id] = {
        width: this.$el.width(),
        height: this.$el.height(),
        left: pos.left,
        top: pos.top,
        "class": this.className.upperCaseFirst(),
        data: this.data()
      };
      return Storage.set("widgets", widgets);
    };

    Widget.prototype.data = function() {
      if (this.model != null) {
        return this.model.data;
      } else {
        return false;
      }
    };

    Widget.prototype.close = function() {
      var widgets;
      this.$el.remove();
      widgets = Storage.get("widgets", {});
      if (widgets[this.id] != null) {
        delete widgets[this.id];
      }
      return Storage.set("widgets", widgets);
    };

    Widget.prototype.growToContent = function() {
      return this.$widget.css({
        height: this.$widget[0].scrollHeight
      });
    };

    return Widget;

  })();

  Connection = (function(_super) {

    __extends(Connection, _super);

    function Connection() {
      return Connection.__super__.constructor.apply(this, arguments);
    }

    Connection.prototype.connect = function(cb) {
      var _this = this;
      return $.post("/api/session", this.data, function(result) {
        if (typeof cb === "function") {
          cb(result);
        }
        if ((_this.data.db != null) && (_this.data.alias != null)) {
          return _this.emit("connected");
        }
      });
    };

    Connection.prototype.getStorages = function(cb) {
      return $.get("/api/storages", cb);
    };

    Connection.prototype.createDatabase = function(alias, name, cb) {
      return $.post("/api/db", {
        alias: alias,
        name: name
      }, cb);
    };

    Connection.prototype.getDatabases = function(alias, cb) {
      return $.get("/api/databases/" + alias, cb);
    };

    Connection.prototype.getEntity = function(id, cb) {
      return $.get("/api/entity/" + id, cb);
    };

    Connection.prototype.transact = function(transaction, cb) {
      return $.post("/api/transact", {
        transaction: transaction
      }, function(result) {
        if (typeof cb === "function") {
          cb(result);
        }
        return DatomicIsm.schema.refresh();
      });
    };

    Connection.prototype.query = function(q, args, cb) {
      return $.get("/api/query", {
        query: q
      }, cb);
    };

    return Connection;

  })(Model);

  regex = {
    floatStart: /^[\+\-]?[0-9]*[.]?$/,
    float: /^[\+\-]?[0-9]*[.][0-9]+$/,
    keyword: /^[\:][A-Za-z\-\_\+\#\!\.\=\|\>\<\?\*\&\/]*$/
  };

  Entity = (function(_super) {

    __extends(Entity, _super);

    function Entity() {
      return Entity.__super__.constructor.apply(this, arguments);
    }

    return Entity;

  })(Model);

  EntityView = (function(_super) {

    __extends(EntityView, _super);

    function EntityView() {
      return EntityView.__super__.constructor.apply(this, arguments);
    }

    EntityView.prototype.title = "Entity";

    EntityView.prototype.className = "entity";

    EntityView.prototype.sizeRows = function() {
      return this.$results.css({
        height: this.$el.outerHeight() - this.$searchBy.outerHeight() - this.$handle.outerHeight() - 43 - this.$moreRow.outerHeight() - this.$message.outerHeight(),
        width: this.$el.outerWidth()
      });
    };

    EntityView.prototype.drawControls = function() {
      this._nsCombo(this.$byNS);
      return this.$searchBy.trigger("change");
    };

    EntityView.prototype.growToContent = function() {
      this.$results.css({
        height: this.$results[0].scrollHeight,
        width: this.$results[0].scrollWidth
      });
      this.$el.css({
        height: this.$results[0].scrollHeight + 22 + this.$searchBy.outerHeight() + this.$moreRow.outerHeight() + this.$handleBar.outerHeight()
      });
      return this.sizeRows();
    };

    EntityView.prototype._nsCombo = function(control) {
      var combo, handleNode;
      combo = control || bling("select");
      combo.html("").bappend("option", {
        value: "--",
        text: "Namespace"
      });
      handleNode = function(node, indent) {
        var n, r, _ref, _results;
        if (indent == null) {
          indent = 0;
        }
        combo.append(bling("option", {
          value: node.get("path"),
          html: Array(indent + 1).join("&nbsp;&nbsp;") + node.get("name")
        }));
        _ref = node.get("children");
        _results = [];
        for (n in _ref) {
          r = _ref[n];
          _results.push(handleNode(r, indent + 1));
        }
        return _results;
      };
      handleNode(DatomicIsm.schema.get("root"));
      return combo;
    };

    EntityView.prototype._refBrowser = function(entity, dn, dv) {
      var self;
      self = this;
      return bling(".refinput input, button.browse", function() {
        var _this = this;
        this.input.prop({
          name: dn
        }).val(dv[":db/id"]);
        this.input.numeric({
          negative: false
        });
        this.button.after(self._removeButton(this.refinput, this.input));
        return this.browse.text("...").on({
          click: function(e) {
            var widget;
            widget = DatomicIsm.fetchEntity(_this.input.val(), e);
            widget.view.$message.text("The next entity you select will be used as ref for " + entity[":db/id"] + "/" + dn);
            return widget.view.onSelect = function(ns, ent) {
              _this.input.val(ent[":db/id"]);
              return widget.view.close();
            };
          }
        });
      });
    };

    EntityView.prototype._removeButton = function(holder, control) {
      return bling("button.remove", function() {
        var _this = this;
        return this.remove.text("x").on({
          click: function() {
            if (holder.hasClass("newValue")) {
              holder.remove();
              return DatomicIsm.bus.emit("newAttribute.removed");
            } else {
              if (control.hasClass("removed")) {
                control.removeClass("removed").attr({
                  disabled: null
                });
                return _this.remove.text("x");
              } else {
                control.addClass("removed").attr({
                  disabled: true
                });
                return _this.remove.html("&#8624;");
              }
            }
          }
        });
      });
    };

    EntityView.prototype._attrValue = function(entity, dn, dv, type) {
      var self;
      self = this;
      return bling(".inputHolder input", function() {
        if (type === ":db.type/boolean") {
          this.input.prop({
            type: "checkbox"
          });
          if (dv) {
            this.input.prop({
              checked: true
            });
          }
        }
        if (type === ":db.type/long") {
          this.input.numeric();
        }
        if (type === ":db.type/double") {
          this.input.numeric({
            decimal: "."
          });
        }
        return this.input.attr({
          value: dv,
          name: dn
        }).after(self._removeButton(this.inputHolder, this.input));
      });
    };

    EntityView.prototype.drawEntity = function(entity, appendTo, subcnt) {
      var buttons, dn, dv, editing, newAttrs, newEntity, ns, nslis, nsul, result, self, vals, _fn,
        _this = this;
      if (subcnt == null) {
        subcnt = 1;
      }
      self = this;
      appendTo || (appendTo = self.$results);
      if (_.isObject(entity)) {
        appendTo.append(result = bling(".result"));
        if (entity[":db/id"] != null) {
          result.addClass("entity entity-" + entity[":db/id"]);
          result.bappend(".detail label, span.val", function() {
            var _this = this;
            this.label.text("id");
            this.val.text(entity[":db/id"]);
            return this.val.addClass("idlink").on({
              click: function(e) {
                return DatomicIsm.fetchEntity(entity[":db/id"], e);
              }
            });
          });
        }
        ns = false;
        if (entity.newEntity) {
          ns = ":" + entity.newEntity;
          newEntity = true;
          delete entity.newEntity;
        }
        nslis = {};
        vals = {};
        newAttrs = {};
        result.append(nsul = bling("ul.namespaces"));
        _fn = function(dn, dv) {
          var attName, _ref;
          _ref = dn.split("/"), ns = _ref[0], attName = _ref[1];
          if (nslis[ns] == null) {
            nsul.append(bling("li span.nsname, ul", function() {
              this.span.text(ns.slice(1));
              this.span.addClass("link").on({
                click: function(e) {
                  return DatomicIsm.fetchBrowser({
                    resource: "resource-" + ns.slice(1)
                  }, e);
                }
              });
              return nslis[ns] = this.ul;
            }));
          }
          return nslis[ns].bappend("li.detail label, span.val, .valWrite", function() {
            var addButton, attr, attrType, ref, v, _fn1, _i, _j, _len, _len1,
              _this = this;
            this.detail.draggable({
              handle: "label",
              helper: "clone",
              appendTo: "body",
              start: function(e, ui) {
                ui.helper.prepend(bling(".entityId", {
                  html: "entity&nbsp;" + entity[":db/id"]
                }));
                return ui.helper.css({
                  zIndex: 6000
                });
              },
              stop: function(e) {
                return DatomicIsm.fetchDatom(entity[":db/id"], dn, e);
              }
            });
            vals[dn] = {
              read: this.val,
              write: this.valWrite.hide()
            };
            this.label.text(attName);
            attrType = false;
            if (attr = DatomicIsm.schema.getAttribute(dn)) {
              (function(attr) {
                attrType = attr.value[':db/valueType'];
                return _this.label.addClass("idlink").on({
                  click: function(e) {
                    return DatomicIsm.fetchEntity(attr.value[':db/id'], e);
                  }
                });
              })(attr);
            }
            if (_.isArray(dv)) {
              if (attrType === ":db.type/ref") {
                _fn1 = function(v) {
                  if (!_.isObject(v)) {
                    v = DatomicIsm.schema.getAttribute(v).value;
                  }
                  _this.val.bappend("span.idlink, span.spacer", function() {
                    this.spacer.text(" ");
                    return this.idlink.text(v[":db/ident"] || v[":db/id"]).on({
                      click: function(e) {
                        return DatomicIsm.fetchEntity(v[":db/id"], e);
                      }
                    });
                  });
                  return _this.valWrite.append(self._refBrowser(entity, dn, v));
                };
                for (_i = 0, _len = dv.length; _i < _len; _i++) {
                  v = dv[_i];
                  _fn1(v);
                }
                this.valWrite.append(addButton = bling("button.add"));
                return addButton.text("+").on({
                  click: function() {
                    return addButton.before((self._refBrowser(entity, dn, {})).addClass("newValue"));
                  }
                });
              } else {
                this.val.text(dv.join(", "));
                for (_j = 0, _len1 = dv.length; _j < _len1; _j++) {
                  v = dv[_j];
                  this.valWrite.append(self._attrValue(entity, dn, v, attrType));
                }
                this.valWrite.append(addButton = bling("button.add"));
                return addButton.text("+").on({
                  click: function() {
                    return addButton.before((self._attrValue(entity, dn, "", attrType)).addClass("newValue"));
                  }
                });
              }
            } else if (_.isObject(dv)) {
              if (dv[":db/id"] != null) {
                this.val.text(dv[":db/id"]).addClass("entityLink").on({
                  click: function(e) {
                    return DatomicIsm.fetchEntity(dv[":db/id"], e);
                  }
                });
                this.valWrite.append(self._refBrowser(entity, dn, dv));
                return DatomicIsm.connection.getEntity(dv[":db/id"], function(ent) {
                  var k, _results;
                  _results = [];
                  for (k in ent) {
                    v = ent[k];
                    if (!(_.last(k.split("/")) === "name")) {
                      continue;
                    }
                    _this.val.text("" + dv[":db/id"] + " (" + v + ")");
                    break;
                  }
                  return _results;
                });
              } else {
                return this.val.text(JSON.stringify(dv));
              }
            } else {
              this.val.text(dv);
              if ((attrType === ":db.type/ref") && (ref = DatomicIsm.schema.getAttribute(dv))) {
                return (function(ref) {
                  var enumAttrs, enumNS;
                  _this.val.addClass("idlink").on({
                    click: function(e) {
                      return DatomicIsm.fetchEntity(ref.value[":db/id"], e);
                    }
                  });
                  if (ref.type === "enum" && (enumNS = _.first(dv.slice(1).split("/"))) && (enumAttrs = DatomicIsm.schema.getNamespace(enumNS))) {
                    return _this.valWrite.bappend(".inputHolder select optgroup", function() {
                      var _k, _len2, _ref1;
                      this.select.prop({
                        name: dn
                      });
                      this.optgroup.attr({
                        label: enumNS
                      });
                      _ref1 = enumAttrs.attributes;
                      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        attr = _ref1[_k];
                        this.optgroup.bappend("option", {
                          value: attr.get(":db/id"),
                          text: attr.get("name")
                        });
                      }
                      return this.select.val(ref.value[":db/id"]).after(self._removeButton(this.inputHolder, this.select));
                    });
                  } else {
                    return _this.valWrite.append(self._refBrowser(entity, dn, dv));
                  }
                })(ref);
              } else {
                return this.valWrite.append(self._attrValue(entity, dn, dv, attrType));
              }
            }
          });
        };
        for (dn in entity) {
          dv = entity[dn];
          if (!(dn !== ":db/id")) {
            continue;
          }
          if (dn[0] !== ":") {
            continue;
          }
          _fn(dn, dv);
        }
        result.bappend(".@buttons button.@edit, button.@addAttribute, button.@cancel, button.@transact, button.@retract", {
          self: buttons = {}
        });
        editing = false;
        buttons.$edit.text("edit").cloak().on({
          click: function() {
            var val;
            editing = true;
            for (dn in vals) {
              val = vals[dn];
              val.read.hide();
              val.write.show();
            }
            buttons.$edit.hide();
            buttons.$addAttribute.show();
            buttons.$cancel.show();
            buttons.$transact.show();
            return buttons.$retract.show();
          }
        });
        if (!entity[":db/id"]) {
          buttons.$retract.remove();
        }
        buttons.$retract.text("retract entity").css({
          float: "right",
          marginRight: 20
        }).hide().on({
          click: function() {
            return DatomicIsm.connection.transact(edn.encode([[":db.fn/retractEntity", entity[":db/id"]]]));
          }
        });
        buttons.$addAttribute.text("add attribute").hide().on({
          click: function() {
            return buttons.$buttons.before(bling(".inputHolder.newAttribute.newValue", function() {
              var attrs, input, newAttributeLabel, select, valInputs,
                _this = this;
              this.inputHolder.append(newAttributeLabel = bling("span", {
                text: "New Attribute"
              }), select = self._nsCombo(), attrs = bling("select"), input = bling(".newAttrWrapper"), self._removeButton(this.inputHolder).on("click.rowItem", function() {
                return delete newAttrs[attrs.val()];
              }), valInputs = bling(".valInputs"));
              attrs.hide().on({
                change: function() {
                  var addButton, attrDetails, ctrl, val;
                  if (attrs.val() === "---") {
                    return valInputs.html("");
                  }
                  attrDetails = DatomicIsm.schema.getAttribute(attrs.val());
                  if (attrDetails.value[":db/valueType"] === ":db.type/ref") {
                    ctrl = "_refBrowser";
                    val = {};
                  } else {
                    ctrl = "_attrValue";
                    val = "";
                  }
                  newAttrs[attrs.val()] = _this.inputHolder;
                  DatomicIsm.bus.on("newAttribute.removed", function() {
                    if ($(".inputHolder, .refinput", valInputs).length === 0) {
                      return attrs.val("---").trigger("change");
                    }
                  });
                  valInputs.html((self[ctrl]({}, attrDetails.value[":db/ident"], val, attrDetails.value[":db/valueType"])).addClass("newValue"));
                  if (attrDetails.value[":db/cardinality"] === ":db.cardinality/many") {
                    valInputs.append(addButton = bling("button"));
                    addButton.text("+").on({
                      click: function() {
                        return addButton.before((self[ctrl]({}, attrDetails.value[":db/ident"], val, attrDetails.value[":db/valueType"])).addClass("newValue"));
                      }
                    });
                  } else {
                    $("button.remove", valInputs).remove();
                  }
                  newAttributeLabel.text("" + (attrs.val()) + "  (" + attrDetails.value[":db/valueType"] + ")");
                  select.remove();
                  attrs.remove();
                  return $('option[value="' + attrs.val() + '"]', result).remove();
                }
              });
              select.on({
                change: function() {
                  if (select.val() === "--") {
                    return;
                  }
                  ns = ":" + (select.val());
                  return (function(ns) {
                    var attr, _i, _len, _ref, _results;
                    attrs.html(bling("option", {
                      text: "---",
                      value: "---"
                    }));
                    attrs.hide();
                    if (!ns.isEnum) {
                      _ref = ns.attributes;
                      _results = [];
                      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                        attr = _ref[_i];
                        if (!((entity[attr.data[":db/ident"]] == null) && !newAttrs[attr.data[":db/ident"]])) {
                          continue;
                        }
                        attrs.show();
                        _results.push(attrs.append(bling("option", {
                          value: attr.data[":db/ident"],
                          text: attr.data[":db/ident"].replace(":" + (select.val()) + "/", "")
                        })));
                      }
                      return _results;
                    }
                  })(DatomicIsm.schema.getNamespace(select.val()));
                }
              });
              if (ns) {
                return select.val(ns.slice(1)).trigger("change");
              }
            }));
          }
        });
        buttons.$cancel.text("cancel").hide().on({
          click: function() {
            var attr, val;
            editing = false;
            for (dn in vals) {
              val = vals[dn];
              val.write.hide();
              val.read.show();
            }
            for (dn in newAttrs) {
              attr = newAttrs[dn];
              attr.remove();
              delete newAttrs[dn];
            }
            $(".newAttribute", result).remove();
            buttons.$cancel.hide();
            buttons.$addAttribute.hide();
            buttons.$transact.hide();
            buttons.$retract.hide();
            return buttons.$edit.show();
          }
        });
        buttons.$transact.text("transact").hide().on({
          click: function() {
            var $input, eid, input, transaction, value, _i, _len, _ref;
            if (!entity[":db/id"]) {
              eid = new edn.Tagged(new edn.Tag("db/id"), new edn.Vector([":db.part/user", -1]));
            } else {
              eid = entity[":db/id"];
            }
            transaction = [];
            _ref = $("input[name], select[name]", result);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              input = _ref[_i];
              $input = $(input);
              value = $input.is("[type=checkbox]") ? $input.is(":checked") : $input.val();
              transaction.push([$input.hasClass("removed") ? ":db/retract" : ":db/add", eid, $input.prop("name"), value]);
            }
            return DatomicIsm.connection.transact(edn.encode(transaction), function() {
              return console.log(arguments);
            });
          }
        });
        result.on({
          mouseenter: function() {
            if (!editing) {
              return buttons.$edit.uncloak();
            }
          },
          mouseleave: function() {
            return buttons.$edit.cloak();
          }
        });
        if (newEntity) {
          buttons.$edit.click();
        }
        if (self.onSelect != null) {
          return result.bappend("button", {
            text: "Use Entity",
            on: {
              mouseup: function() {
                return self.onSelect(dn.split("/")[0], entity);
              }
            }
          });
        }
      }
    };

    EntityView.prototype.render = function() {
      var self;
      EntityView.__super__.render.call(this);
      self = this;
      this.$el.resizable().bappend(".searchForm .@message, select.searchBy, input.byId, select.byNS, button.newEntity, .results, .moreRow button.more", {
        self: self
      }, function() {
        var n, ns, offset, searchBy, size, total, v, _ref,
          _this = this;
        self.$searchForm = this.searchForm;
        self.$results = this.results;
        self.$moreRow = this.moreRow;
        self.$searchBy = this.searchBy;
        self.$newEntity = this.newEntity;
        this.newEntity.text("new entity").on({
          click: function() {
            self.$results.html(bling("h1", {
              text: "New Entity"
            }));
            console.log(_this.byNS.val());
            return self.drawEntity({
              newEntity: _this.byNS.val()
            });
          }
        });
        this.searchBy.bappend("option", {
          value: "--",
          text: "Search By"
        });
        _ref = {
          byId: "entity id",
          namespace: "namespace"
        };
        for (v in _ref) {
          n = _ref[v];
          this.searchBy.bappend("option", {
            value: v,
            html: "&nbsp;&nbsp;" + n
          });
        }
        offset = 0;
        total = 0;
        size = 4;
        ns = false;
        this.more.text("more").on({
          click: function() {
            _this.more.text("loading").attr({
              disabled: true
            });
            offset++;
            return ns.fetchRecords((function(records) {
              var count, entity, _i, _len, _results;
              count = (size + 1) * (offset + 1);
              if (count >= total) {
                _this.more.cloak();
              } else {
                _this.more.text("more (" + count + "/" + total + ")").attr({
                  disabled: false
                });
              }
              _results = [];
              for (_i = 0, _len = records.length; _i < _len; _i++) {
                entity = records[_i];
                _results.push(self.drawEntity(entity.data));
              }
              return _results;
            }), offset, size);
          }
        });
        this.byNS.on({
          change: function() {
            var att, _i, _len, _ref1, _results;
            if (!DatomicIsm.schema.loaded) {
              return;
            }
            if (_this.byNS.val() === "--") {
              return;
            }
            self.model.set("byNS", _this.byNS.val());
            ns = DatomicIsm.schema.getNamespace(_this.byNS.val());
            if (ns instanceof Enum) {
              self.$results.html("");
              _this.more.cloak();
              _ref1 = ns.attributes;
              _results = [];
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                att = _ref1[_i];
                _results.push(self.drawEntity(att.data));
              }
              return _results;
            } else {
              self.$results.html("fetching");
              return ns.fetchRecords(function(records) {
                var entity, _j, _len1;
                self.$results.html("");
                offset = 0;
                total = ns.entities.length;
                _this.more.attr({
                  disabled: false
                });
                if (total === 1) {
                  _this.more.cloak();
                }
                for (_j = 0, _len1 = records.length; _j < _len1; _j++) {
                  entity = records[_j];
                  self.drawEntity(entity.data);
                }
                if ((size + 1) < total) {
                  return _this.more.text("more (" + (size + 1) + "/" + total + ")").uncloak();
                }
              });
            }
          }
        });
        this.byId.numeric({
          negative: false
        });
        this.byId.on({
          keyup: function() {
            if (!DatomicIsm.schema.loaded) {
              return;
            }
            self.model.set("byId", _this.byId.val().trim());
            if (_this.byId.val().trim().length === 0) {
              return;
            }
            self.$results.html("fetching");
            return DatomicIsm.connection.getEntity(_this.byId.val(), function(entity) {
              self.$results.html("");
              self.drawEntity(entity);
              return self.growToContent();
            });
          }
        });
        this.byNS.hide();
        this.byId.hide();
        self.$searchBy = this.searchBy.on({
          change: function() {
            self.model.set("searchBy", _this.searchBy.val());
            self.$results.html("");
            _this.more.cloak();
            switch (_this.searchBy.val()) {
              case "--":
                _this.byNS.hide();
                return _this.byId.hide();
              case "byId":
                _this.byNS.hide();
                _this.byId.show().val("");
                _this.byId.val(self.model.get("byId"));
                return _this.byId.trigger("keyup");
              case "namespace":
                _this.byId.hide();
                _this.byNS.show();
                _this.byNS.val(self.model.get("byNS", "--"));
                return _this.byNS.trigger("change");
            }
          }
        });
        self.$byNS = this.byNS;
        if (searchBy = self.model.get("searchBy")) {
          this.searchBy.val(searchBy);
        }
        self.drawControls();
        DatomicIsm.schema.on("refreshed", function() {
          self.drawControls();
          if (searchBy) {
            return _this.searchBy.val(searchBy);
          }
        });
        return this.searchBy.trigger("change");
      });
      return this.$el.on("resize.Entity", function() {
        return self.sizeRows();
      });
    };

    EntityView.prototype.postAppend = function() {
      return this.sizeRows();
    };

    return EntityView;

  })(Widget);

  Attribute = (function(_super) {

    __extends(Attribute, _super);

    function Attribute() {
      return Attribute.__super__.constructor.apply(this, arguments);
    }

    return Attribute;

  })(Model);

  Record = (function(_super) {

    __extends(Record, _super);

    function Record() {
      return Record.__super__.constructor.apply(this, arguments);
    }

    Record.prototype.dataForTransaction = function() {
      var k, result, tid, v, _ref;
      result = {};
      tid = 0;
      if (this.isNew()) {
        result["db/id"] = new edn.Tagged(new edn.Tag("db/id"), new edn.Vector([":db.part/user", -(++tid)]));
      }
      _ref = this.data;
      for (k in _ref) {
        v = _ref[k];
        if (v != null) {
          result[k === "db/id" ? k : "" + this.ns + "/" + k] = v;
        }
      }
      return result;
    };

    return Record;

  })(Model);

  Namespace = (function(_super) {

    __extends(Namespace, _super);

    function Namespace() {
      return Namespace.__super__.constructor.apply(this, arguments);
    }

    Namespace.prototype.init = function() {
      this.attributes = [];
      this.recordMap = {};
      return this.records = [];
    };

    Namespace.prototype.ednPrep = function() {
      var attribute, i, item, ns, option, out, val, _i, _j, _len, _len1, _ref, _ref1;
      ns = this.get("name");
      out = [];
      _ref = this.attributes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        attribute = _ref[i];
        if (!attribute.get("name")) {
          continue;
        }
        item = {
          "db/id": new edn.Tagged(new edn.Tag("db", "id"), [":db.part/db"]),
          "db/ident": ":" + ns + "/" + (attribute.get("name")),
          "db/valueType": attribute.get(":db/valueType"),
          "db/cardinality": attribute.get(":db/cardinality")
        };
        attribute.set(":db/ident", item["db/ident"]);
        attribute.set(":db/id", true);
        attribute._isNew = false;
        _ref1 = ["doc", "unique", "index", "fulltext", "isComponent", "noHistory"];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          option = _ref1[_j];
          if ((val = attribute.get(":db/" + option)) && !_.isNull(val)) {
            item["db/" + option] = val;
          }
        }
        item["db.install/_attribute"] = ":db.part/db";
        out.push(item);
      }
      return out;
    };

    Namespace.prototype._fetchEntities = function(cb) {
      var attr, checkCount, checkDone, self, _i, _len, _ref, _results;
      self = this;
      this.entities = [];
      checkCount = this.attributes.length;
      checkDone = function() {
        checkCount--;
        if (!checkCount) {
          return cb();
        }
      };
      _ref = this.attributes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        _results.push(DatomicIsm.connection.query("[:find ?id :where [?id :" + (this.get("name")) + "/" + (attr.get("name")) + "]]", {}, function(ids) {
          var id, _j, _len1, _ref1;
          for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
            id = ids[_j];
            if (_ref1 = _.first(id), __indexOf.call(self.entities, _ref1) < 0) {
              self.entities.push(_.first(id));
            }
          }
          return checkDone();
        }));
      }
      return _results;
    };

    Namespace.prototype.fetchRecords = function(cb, offset, size) {
      var self, _fetch;
      if (offset == null) {
        offset = 0;
      }
      if (size == null) {
        size = 4;
      }
      self = this;
      _fetch = function() {
        var checkCount, checkDone, k, start, subset, subsetRecs, _i, _len, _results;
        start = offset ? (offset * size) + 1 : 0;
        subset = self.entities.slice(start, +(start + size) + 1 || 9e9);
        subsetRecs = [];
        checkCount = subset.length;
        if (checkCount === 0) {
          return typeof cb === "function" ? cb([]) : void 0;
        }
        checkDone = function() {
          checkCount--;
          if (!checkCount) {
            self.emit("recordsFetched", self.records);
            return typeof cb === "function" ? cb(subsetRecs) : void 0;
          }
        };
        _results = [];
        for (_i = 0, _len = subset.length; _i < _len; _i++) {
          k = subset[_i];
          _results.push(DatomicIsm.connection.getEntity(k, function(rec) {
            if (self.recordMap[rec[":db/id"]] != null) {
              self.records[self.recordMap[rec[":db/id"]]].update(rec);
            } else {
              self.recordMap[rec[":db/id"]] = self.records.push(new Record(rec, false)) - 1;
            }
            subsetRecs.push(self.records[self.recordMap[rec[":db/id"]]]);
            return checkDone();
          }));
        }
        return _results;
      };
      if (offset === 0) {
        return this._fetchEntities(_fetch);
      } else {
        return _fetch();
      }
    };

    return Namespace;

  })(Model);

  NamespaceView = (function(_super) {

    __extends(NamespaceView, _super);

    NamespaceView.prototype.title = "Namespace";

    NamespaceView.prototype.className = "namespace";

    NamespaceView.prototype.attributeDefaults = function() {
      return {
        type: ":db.type/string",
        cardinality: ":db.cardinality/one"
      };
    };

    function NamespaceView(model, id) {
      var _this = this;
      this.model = model;
      this.id = id;
      NamespaceView.__super__.constructor.call(this, this.model, this.id);
      this.attributes = [];
      this.records = [];
      this._state = "attributes";
      if (this.model.isNew()) {
        this.$el.addClass("pendingChanges");
      } else {
        this.$el.addClass("noChanges");
      }
      DatomicIsm.schema.whenLoaded(function() {
        if (_this.model.get("name")) {
          _this.model = DatomicIsm.schema.getNamespace(_this.model.get("name"));
          _this.$el.removeClass("pendingChanges");
          _this.$el.addClass("noChanges");
          _this.drawAttributes();
        }
        return _this.model.on("recordsFetched", function(records) {
          var record, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = records.length; _i < _len; _i++) {
            record = records[_i];
            _results.push(_this.addRecord(record));
          }
          return _results;
        });
      });
    }

    NamespaceView.prototype.drawAttributes = function() {
      var attr, _i, _len, _ref, _results;
      this.$attributes.html("");
      _ref = this.model.attributes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        console.log(attr, this.$attributes);
        _results.push(this.addAttribute(attr, false));
      }
      return _results;
    };

    NamespaceView.prototype.attributeOptions = function(model, main, options, isNew) {
      var card, down, optionsToggle, right, type;
      if (isNew == null) {
        isNew = false;
      }
      options.bappend(".optionHolder", function() {
        return this.optionHolder.append(labelPair("doc", textAreaInput(model, ":db/doc")), labelPair("unique", uniqueCombo(model, ":db/unique")), labelPair("index", checkbox(model, ":db/index")), labelPair("fulltext", checkbox(model, ":db/fulltext")), labelPair("component", checkbox(model, ":db/isComponent")), labelPair("no history", checkbox(model, ":db/noHistory")));
      });
      right = "&#x25BA;";
      down = "&#x25BC;";
      main.prepend(optionsToggle = bling("div.optionsToggle", {
        html: right
      }));
      if (!model.get(":db/ident")) {
        main.append(card = oneOrManyToggle(model, ":db/cardinality"), type = typeCombo(model, ":db/valueType"));
        type.trigger("change");
      } else {
        main.append(bling("span.cardinality", {
          text: cardinalityTypes[model.get(":db/cardinality")]
        }), bling("div.valueType span", function() {
          return this.span.text(_.last(model.get(":db/valueType", "/n/a").split("/")));
        }));
      }
      return optionsToggle.on({
        click: function() {
          if (options.is(":visible")) {
            options.slideUp("fast");
            return optionsToggle.html(right);
          } else {
            optionsToggle.html(down);
            return options.slideDown("fast");
          }
        }
      });
    };

    NamespaceView.prototype.addAttribute = function(data, isNew) {
      var column, kosherClass, model, self;
      if (isNew == null) {
        isNew = true;
      }
      self = this;
      if (data instanceof Attribute) {
        model = data;
        isNew = false;
      } else {
        model = new Attribute(data, isNew);
        this.model.attributes.push(model);
        this._showTransactButton = true;
        this.$el.removeClass("noChanges");
        this.$el.addClass("pendingChanges");
        this.showTransactButton();
      }
      if (isNew) {
        kosherClass = kosherName(":" + (this.model.get("name")) + "/" + (model.get("name")));
      } else {
        kosherClass = kosherName(model.get(":db/ident"));
        model.set("name", _.last(model.get(":db/ident").split("/")));
      }
      this.$actionCol.before(column = bling("th.header.cell", {
        text: model.get("name")
      }));
      return this.$attributes.bappend(".attribute." + kosherClass + " .main, .options", function() {
        var name, removeButton,
          _this = this;
        this.main.append(name = nameInput(model, "name"), removeButton = bling("button.removeButton", {
          text: "x",
          css: {
            visibility: "hidden"
          }
        }));
        self.attributeOptions(model, this.main, this.options, isNew);
        this.options.hide();
        removeButton.on({
          click: function() {
            var attribute, pos, row, _i, _len, _ref;
            self.model.attributes = (function() {
              var _i, _len, _ref, _results;
              _ref = self.model.attributes;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                attribute = _ref[_i];
                if (attribute !== model) {
                  _results.push(attribute);
                }
              }
              return _results;
            })();
            _this.attribute.remove();
            pos = column.parent().children().index(column[0]);
            _ref = $("tr", self.$rows);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              row = _ref[_i];
              $(row).children().eq(pos).remove();
            }
            return column.remove();
          }
        });
        if (isNew) {
          this.attribute.on({
            mouseenter: function() {
              return removeButton.css({
                visibility: "visible"
              });
            },
            mouseleave: function() {
              return removeButton.css({
                visibility: "hidden"
              });
            }
          });
        }
        if (!isNew) {
          return name.replaceWith(bling("span.name", {
            text: _.last(model.get(":db/ident").split("/"))
          }));
        } else {
          return name.on({
            keyup: keyHandler({
              ENTER: function() {
                self.addAttribute(self.attributeDefaults());
                return self.focusLastAttribute();
              },
              UP: function() {
                if (!$(".nameInput", name.parent().parent().prev(".attribute")).focus().length) {
                  return self.$name.focus();
                }
              },
              DOWN: function() {
                if (!$(".nameInput", name.parent().parent().next(".attribute")).focus().length) {
                  return self.$name.focus();
                }
              }
            }),
            changedValue: function() {
              var newKosherClass;
              newKosherClass = kosherName(":" + (self.model.get("name")) + "/" + (model.get("name")));
              _this.attribute.attr({
                "class": "attribute " + newKosherClass
              });
              column.text(model.get("name"));
              return kosherClass = newKosherClass;
            }
          });
        }
      });
    };

    NamespaceView.prototype.showCellHalo = function(cell, attr) {
      var self;
      self = this;
      this.hideCellHalo();
      return this.cellHalo = bling(".cellHalo button.retract, button.history, button.idToggle", function() {
        var hideTimeout, ignoreBlur,
          _this = this;
        hideTimeout = false;
        ignoreBlur = false;
        this.retract.text("x").on({
          mousedown: function(e) {
            e.stopPropagation;
            return console.log("retract");
          }
        });
        this.history.text("h").on({
          mousedown: function(e) {
            e.stopPropagation();
            return console.log("show history");
          }
        });
        this.idToggle.text("id").on({
          mousedown: function(e) {
            e.stopPropagation();
            return console.log("show id");
          }
        });
        this.cellHalo.appendTo($("body")).css({
          left: cell.offset().left,
          top: cell.offset().top + cell.outerHeight() + 1,
          width: cell.outerWidth() - 11
        }).on({
          mouseenter: function() {
            ignoreBlur = true;
            return clearTimeout(hideTimeout);
          },
          mousedown: function(e) {
            ignoreBlur = false;
            clearTimeout(hideTimeout);
            return e.stopPropagation();
          }
        });
        return cell.on({
          blur: (function() {
            if (ignoreBlur) {
              return;
            }
            return hideTimeout = setTimeout((function() {
              return _this.cellHalo.remove();
            }), 300);
          })
        }, "input");
      });
    };

    NamespaceView.prototype.hideCellHalo = function() {
      var _ref;
      return (_ref = this.cellHalo) != null ? _ref.remove() : void 0;
    };

    NamespaceView.prototype.getAttributeInput = function(attribute, recordModel, hideables) {
      var enums, n, select, type, v, _ref, _ref1;
      switch (type = attribute.get(":db/valueType")) {
        case ":db.type/string":
          return nameInput(recordModel, attribute.get("name"));
        case ":db.type/boolean":
          return checkbox(recordModel, attribute.get("name"));
        case ":db.type/long":
        case ":db.type/bigint":
        case ":db.type/ref":
          if (type === ":db.type/ref") {
            if (enums = (_ref = DatomicIsm.schema.data[this.model.get("name")]) != null ? (_ref1 = _ref.data.enums) != null ? _ref1[attribute.get("name")] : void 0 : void 0) {
              select = bling("select");
              for (n in enums) {
                v = enums[n];
                select.bappend("option", {
                  value: v[":db/id"],
                  text: n
                });
              }
              return select;
            } else {
              return bling(".entityVal, .entityNS, .entityField, .entityBrowse", function() {
                var entityVal,
                  _this = this;
                entityVal = this.entityVal;
                hideables.push(this.entityBrowse);
                hideables.push(this.entityNS);
                this.entityBrowse.html("&#8230;").on({
                  mousedown: function() {
                    var ev;
                    ev = new EntityView(new Entity);
                    ev.onSelect = function(field, entity) {
                      ev.$el.remove();
                      _this.entityNS.text(field);
                      return _this.entityField.html(bling("select", function() {
                        var f,
                          _this = this;
                        for (f in entity) {
                          v = entity[f];
                          this.select.bappend("option", {
                            text: _.last(f.split("/")),
                            value: v
                          });
                        }
                        hideables.push(this.select);
                        this.select.on({
                          change: function() {
                            return entityVal.text(_this.select.val());
                          }
                        });
                        this.select.cloak();
                        return this.select.trigger("change");
                      }));
                    };
                    ev.$searchForm.prepend(bling(".message", {
                      text: "The next entity you select will be used as the ref"
                    }));
                    ev.$el.appendTo("body");
                    return ev.$el.css({
                      position: "absolute"
                    }).toCenter();
                  }
                });
                this.entityNS.text("--");
                return this.entityVal.text('');
              });
            }
          }
          return textInput(recordModel, attribute.get("name"), function(e, input) {
            var num;
            num = parseInt(input.val());
            if (_.isNumber(num) && !_.isNaN(num)) {
              return input.val(num);
            } else {
              return input.val("");
            }
          });
        case ":db.type/double":
        case ":db.type/float":
        case ":db.type/bigdec":
          return textInput(recordModel, attribute.get("name"), function(e, input, inblur) {
            var num, val;
            if (inblur) {
              val = input.val();
              if (__indexOf.call(String(val), ".") >= 0) {
                return val;
              } else {
                input.val("" + val + ".0");
                return input.val();
              }
            }
            if (regex.floatStart.test(input.val())) {
              return;
            }
            if (regex.float.test(input.val())) {
              return;
            }
            num = parseFloat(input.val());
            if (_.isNumber(num) && !_.isNaN(num)) {
              return input.val(num);
            } else {
              return input.val("");
            }
          });
        case ":db.type/keyword":
          return textInput(recordModel, attribute.get("name"), function(e, input) {
            if (regex.keyword.test(input.val())) {
              return;
            }
            return input.val("");
          });
      }
    };

    NamespaceView.prototype.addRecord = function(data) {
      var model, self;
      self = this;
      if (data instanceof Record) {
        model = data;
      } else {
        model = new Record(data);
      }
      model.ns = this.model.get("name");
      this.records.push(model);
      this.$rows.bappend("tr.row", function(row) {
        var attribute, hideable, hidebuttons, removeButton, unhidebuttons, _fn, _i, _len, _ref,
          _this = this;
        hideable = [];
        hidebuttons = function() {
          var el, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = hideable.length; _i < _len; _i++) {
            el = hideable[_i];
            _results.push(el.cloak());
          }
          return _results;
        };
        unhidebuttons = function() {
          var el, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = hideable.length; _i < _len; _i++) {
            el = hideable[_i];
            _results.push(el.uncloak());
          }
          return _results;
        };
        _ref = self.model.attributes;
        _fn = function(attribute) {
          var cell, input;
          row.append(cell = bling("td", {
            html: input = self.getAttributeInput(attribute, model, hideable)
          }));
          input.on({
            focus: function() {
              self.showCellHalo(cell, attribute);
              $(".remove", self.$rows).cloak();
              return removeButton.uncloak();
            }
          });
          return model.on("change:" + (attribute.get("name")), function() {
            return cell.addClass("pendingChanges");
          });
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attribute = _ref[_i];
          _fn(attribute);
        }
        removeButton = false;
        model.on("change", function() {
          self._showTransactButton = true;
          return self.$transactButton.uncloak();
        });
        return row.append(bling("td button.remove", function() {
          removeButton = this.remove.text("x").cloak().on({
            click: function() {
              return row.remove();
            }
          });
          hideable.push(removeButton);
          return row.on({
            mouseenter: unhidebuttons,
            mouseleave: hidebuttons
          });
        }));
      });
      return $("tr:last td:first input", this.$records).focus();
    };

    NamespaceView.prototype.focusFirstAttribute = function() {
      return $(".attribute .nameInput", this.$el).first().focus();
    };

    NamespaceView.prototype.focusLastAttribute = function() {
      return $(".attribute .nameInput", this.$el).last().focus();
    };

    NamespaceView.prototype.activeFocus = function() {
      return $(window.document.activeElement);
    };

    NamespaceView.prototype.focusInputLeft = function() {
      if (!$("input", this.activeFocus().parent().prev()).focus().length) {
        return console.log("no left");
      }
    };

    NamespaceView.prototype.focusInputRight = function() {
      if (!$("input", this.activeFocus().parent().next()).focus().length) {
        return console.log("no right");
      }
    };

    NamespaceView.prototype.focusInputUp = function() {
      var cell, pos;
      cell = this.activeFocus().parent();
      pos = cell.parent().children().index(cell);
      if (!$("input", cell.parent().prev()).eq(pos).focus().length) {
        return console.log("no up");
      }
    };

    NamespaceView.prototype.focusInputDown = function() {
      var cell, pos;
      cell = this.activeFocus().parent();
      pos = cell.parent().children().index(cell);
      if (!$("input", cell.parent().next()).eq(pos).focus().length) {
        return console.log("no down");
      }
    };

    NamespaceView.prototype.setupRecords = function() {
      var self,
        _this = this;
      self = this;
      this.$records.bappend("table thead.columns, tbody.rows", function() {
        self.$rows = this.rows;
        return this.columns.append(bling("tr th.actionCol.cell", function() {
          return self.$actionCol = this.actionCol.html("&nbsp;");
        }));
      });
      return this.$records.on({
        keydown: keyHandler({
          ENTER: function() {
            return _this.addRecord();
          },
          LEFT: function() {
            return _this.focusInputLeft();
          },
          RIGHT: function() {
            return _this.focusInputRight();
          },
          UP: function() {
            return _this.focusInputUp();
          },
          DOWN: function() {
            return _this.focusInputDown();
          }
        })
      }, "td input");
    };

    NamespaceView.prototype.showTransactButton = function() {
      if (this.model.hasPendingChanges() || this._showTransactButton) {
        return this.$transactButton.uncloak();
      }
    };

    NamespaceView.prototype.sizeRows = function() {
      return this.$attributes.css({
        height: this.$el.outerHeight() - (this.$nameHeader.outerHeight() + this.$buttons.outerHeight() + this.$handleBar.outerHeight() + 30)
      });
    };

    NamespaceView.prototype.postAppend = function() {
      return this.sizeRows();
    };

    NamespaceView.prototype.render = function() {
      var self,
        _this = this;
      NamespaceView.__super__.render.call(this);
      self = this;
      this.$el.resizable({
        resize: function() {
          return _this.sizeRows();
        }
      });
      return this.$el.bappend(".@nameHeader, .@attributes, .@records, .@buttons button.addAttribute, button.addRecord", {
        self: self
      }, function() {
        var transactButton,
          _this = this;
        this.records.hide();
        self.setupRecords();
        this.nameHeader.html(self.$name = (nameInput(self.model, "name")).on({
          keyup: keyHandler({
            ENTER: function() {
              self.addAttribute(self.attributeDefaults());
              return self.focusLastAttribute();
            },
            UP: function() {
              return self.focusLastAttribute();
            },
            DOWN: function() {
              return self.focusFirstAttribute();
            }
          })
        }));
        if (self.model.get(":db/id")) {
          self.$name.replaceWith(bling("span", {
            text: self.model.get("name")
          }));
        }
        this.nameHeader.append(transactButton = bling("button.@transactButton", {
          self: self
        }, function() {
          var _this = this;
          return this.button.text("Transact").on({
            click: function() {
              var record, recordIds, transaction, _i, _len, _ref;
              _this.button.cloak();
              if (self._state === "records") {
                transaction = [];
                recordIds = [];
                _ref = self.records;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  record = _ref[_i];
                  if (record.hasPendingChanges()) {
                    transaction.push(record.dataForTransaction());
                    recordIds.push(record.id);
                  }
                }
                console.log(edn.encode(transaction));
                return DatomicIsm.connection.transact(edn.encode(transaction), function(result) {
                  $("td.pendingChanges", self.$el).removeClass("pendingChanges");
                  return self._showTransactButton = false;
                });
              } else {
                return DatomicIsm.connection.transact(edn.encode(self.model.ednPrep()), function() {
                  self.$el.removeClass("pendingChanges");
                  self.$el.addClass("noChanges");
                  self.drawAttributes();
                  return self._showTransactButton = false;
                });
              }
            }
          });
        }));
        transactButton.cloak();
        self.model.on("change", function() {
          return transactButton.uncloak();
        });
        this.addAttribute.text("+").on({
          click: function() {
            self.addAttribute(self.attributeDefaults());
            return self.focusLastAttribute();
          }
        });
        this.addRecord.hide().text("+").on({
          click: function() {
            return self.addRecord();
          }
        });
        /*
        self.$dataToggle = @dataToggle.text("d")
            .on click: =>
                if self.$attributes.is(":visible")
                    @addAttribute.hide()
                    @addRecord.show()
                    self.$attributes.hide()
                    self.$records.show()
                    self._state = "records"
                else
                    @addRecord.hide()
                    @addAttribute.show()
                    self.$records.hide()
                    self.$attributes.show()
                    self._state = "attributes"
        */

        this.buttons = this.buttons.add(self.$closeButton);
        this.buttons.cloak();
        return self.$el.on({
          dragstart: function() {
            return self.hideCellHalo();
          },
          mouseenter: function() {
            _this.buttons.uncloak();
            return self.showTransactButton();
          },
          mouseleave: function() {
            if (!self.$el.hasClass("ui-draggable-dragging")) {
              self.hideCellHalo();
              transactButton.cloak();
              return _this.buttons.cloak();
            }
          }
        });
      });
    };

    return NamespaceView;

  })(Widget);

  Enum = (function(_super) {

    __extends(Enum, _super);

    function Enum() {
      return Enum.__super__.constructor.apply(this, arguments);
    }

    Enum.prototype.isEnum = true;

    Enum.prototype.ednPrep = function() {
      var attribute, item, ns, out, _i, _len, _ref;
      ns = this.get("name");
      out = [];
      _ref = this.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        item = {
          "db/id": new edn.Tagged(new edn.Tag("db", "id"), [":db.part/db"]),
          "db/ident": ":" + ns + "/" + (attribute.get("name"))
        };
        out.push(item);
        attribute.set(":db/ident", item["db/ident"]);
      }
      return out;
    };

    return Enum;

  })(Namespace);

  EnumView = (function(_super) {

    __extends(EnumView, _super);

    function EnumView() {
      return EnumView.__super__.constructor.apply(this, arguments);
    }

    EnumView.prototype.title = "Enum";

    EnumView.prototype.className = "enum";

    EnumView.prototype.attributeOptions = function() {};

    EnumView.prototype.render = function() {
      EnumView.__super__.render.call(this);
      return this.$el.addClass("enumNamespace namespace");
    };

    return EnumView;

  })(NamespaceView);

  Query = (function(_super) {

    __extends(Query, _super);

    function Query() {
      return Query.__super__.constructor.apply(this, arguments);
    }

    return Query;

  })(Model);

  QueryView = (function(_super) {
    var _parseClause;

    __extends(QueryView, _super);

    function QueryView() {
      return QueryView.__super__.constructor.apply(this, arguments);
    }

    QueryView.prototype.title = "Query";

    QueryView.prototype.className = "query";

    _parseClause = function(clause) {};

    QueryView.prototype.parseQuery = function() {
      var atom, attr, clause, first, last, newValue, parsed, pushOnto, sublast, sym, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
      try {
        newValue = this.editor.getValue();
        parsed = edn.toJS(edn.parse(newValue.trim()[0] === "[" ? newValue : "[" + newValue + "]"));
        this.query = {};
        pushOnto = false;
        for (_i = 0, _len = parsed.length; _i < _len; _i++) {
          atom = parsed[_i];
          if (atom[0] === ":") {
            this.query[atom] = pushOnto = [];
          } else {
            pushOnto.push(atom);
          }
        }
        this.findSymbols = {};
        if (this.query[':find'] != null) {
          this.findSymbols = this.query[':find'];
        }
        this.knownSymbols = {};
        if (this.query[':in'] != null) {
          _ref = _.flatten(this.query[':in']);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            sym = _ref[_j];
            this.knownSymbols[sym] = true;
          }
        }
        if (!_.isEqual(this.inputs, this.query[':in'])) {
          this.inputs = this.query[':in'];
          this.drawInputs();
        }
        if (this.query[':where'] != null) {
          _ref1 = this.query[':where'];
          _results = [];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            clause = _ref1[_k];
            if (!(_.isArray(clause))) {
              continue;
            }
            first = _.first(clause);
            if (_.isArray(first)) {
              false;
            } else if (first[0] === "?") {
              if (attr = DatomicIsm.schema.getAttribute(clause[1])) {
                this.knownSymbols[first] = ":db/id";
              } else {
                this.knownSymbols[first] = true;
              }
            }
            last = _.last(clause);
            if (_.isArray(last)) {
              _results.push((function() {
                var _l, _len3, _ref2, _results1;
                _ref2 = _.flatten(last);
                _results1 = [];
                for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                  sublast = _ref2[_l];
                  _results1.push(this.knownSymbols[sublast] = true);
                }
                return _results1;
              }).call(this));
            } else if (last[0] === "?") {
              if (clause[clause.length - 2][0] === ":") {
                if (attr = DatomicIsm.schema.getAttribute(clause[clause.length - 2])) {
                  _results.push(this.knownSymbols[last] = attr.value[':db/valueType']);
                } else {
                  _results.push(this.knownSymbols[last] = true);
                }
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      } catch (e) {
        console.log(e);
        return false;
      }
    };

    QueryView.prototype._vector = function(inputs) {
      var self;
      self = this;
      return bling(".vector", function() {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = inputs.length; _i < _len; _i++) {
          item = inputs[_i];
          if (_.isArray(item)) {
            _results.push(this.vector.append(self._vector(item)));
          } else {
            _results.push(this.vector.append(bling(".inputWrapper .placeholder, .control", function() {
              var drawCombo,
                _this = this;
              if (item[0] === "$") {
                this.inputWrapper.append(dbCombo(self.model, item));
              } else if (item[0] === "%") {
                drawCombo = function() {
                  var n, name, rules, v, _ref;
                  rules = {};
                  _ref = RulesView.instances;
                  for (n in _ref) {
                    v = _ref[n];
                    if (name = v.model.get("widgetName")) {
                      rules[n] = name;
                    }
                  }
                  return _this.control.html(comboInput(rules, self.model, item));
                };
                drawCombo();
                DatomicIsm.bus.on("rulesChanged", drawCombo);
              } else {
                this.inputWrapper.append(textInput(self.model, item));
              }
              return this.placeholder.text(item);
            })));
          }
        }
        return _results;
      });
    };

    QueryView.prototype._populateVector = function(inputs) {
      var item, self, vec, _fn, _i, _len;
      self = this;
      vec = [];
      _fn = function(item) {
        var itemVal, rules;
        if (_.isArray(item)) {
          return vec.push(self._populateVector(item));
        } else {
          itemVal = self.model.get(item);
          if (item[0] === "$") {
            itemVal = edn.parse(itemVal);
          }
          if (item[0] === "%") {
            rules = RulesView.instances[itemVal].model.get("input");
            itemVal = {
              ednEncode: function() {
                return rules;
              }
            };
          }
          return vec.push(itemVal);
        }
      };
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        item = inputs[_i];
        _fn(item);
      }
      return vec;
    };

    QueryView.prototype.drawInputs = function() {
      if ((!_.isArray(this.inputs)) || this.inputs.length === 0) {
        this.$inputs.hide();
        this.$manualInputWrapper.hide();
        this.$inputToggle.cloak();
        this.$details.css({
          height: this.$buttons.outerHeight()
        });
        this.sizeCols();
      } else {
        this.$inputToggle.uncloak();
        if (this.model.get("inputState") === "auto") {
          this.$inputToggle.text("manual input");
          this.$manualInputWrapper.hide();
          this.$inputs.show();
          this.$inputs.html("");
          if (_.isArray(this.inputs)) {
            this.$inputs.html(this._vector(this.inputs));
          }
          this.$details.css({
            height: this.$buttons.outerHeight() + $(".vector", this.$inputes).outerHeight() + 10
          });
          this.sizeCols();
        } else {
          this.$inputToggle.text("auto input");
          this.$manualInputWrapper.show();
          this.$manualInput.setValue(this.$manualInput.getValue());
          this.$inputs.hide();
        }
      }
      return this.sizeCols();
    };

    QueryView.prototype.refresh = function() {
      var cur;
      cur = this.editor.getCursor();
      this.editor.setValue(this.editor.getValue());
      return this.editor.setCursor(cur);
    };

    QueryView.prototype.sizeCols = function() {
      var dheight, dtop, fcols, frow, handleHeight, inputEditorHeight, total;
      handleHeight = this.$handleBar.outerHeight();
      total = this.$el.outerHeight() - handleHeight;
      dheight = this.$details.outerHeight();
      dtop = this.$details.position().top - handleHeight;
      this.$wrapper.css({
        height: dtop
      });
      $(".CodeMirror-scroll", this.$wrapper).css({
        height: dtop
      });
      inputEditorHeight = dheight - this.$buttons.outerHeight() - 12;
      this.$manualInputWrapper.css({
        height: inputEditorHeight
      });
      $(".CodeMirror-scroll", this.$manualInputWrapper).css({
        height: inputEditorHeight
      });
      this.$inputs.css({
        height: inputEditorHeight
      });
      this.$results.css({
        marginTop: dheight,
        height: total - (dtop + dheight)
      });
      this.$details.css({
        width: "100%"
      });
      this.$rowsWrapper.css({
        height: total - (dtop + dheight + this.$cols.outerHeight())
      });
      frow = $("tr", this.$rows).first();
      fcols = $("td", $("tr", this.$cols).first());
      $("td", frow).each(function(i, td) {
        var makeWidth;
        makeWidth = $(td).width();
        return fcols.eq(i).css({
          width: makeWidth
        });
      });
      return this.model.set("midPaneHeight", this.$details.height());
    };

    QueryView.prototype.postAppend = function() {
      var query,
        _this = this;
      DatomicIsm.schema.on("refreshed", function() {
        return _this.refresh();
      });
      query = this.model.get("query");
      if (query) {
        this.editor.setValue(query);
        this.parseQuery();
        this.refresh();
        if (_.size(this.query)) {
          this.runQuery();
        }
      }
      return this.sizeCols();
    };

    QueryView.prototype.runQuery = function() {
      var args, query, self;
      if (!DatomicIsm.schema.loaded) {
        return;
      }
      self = this;
      query = this.editor.getValue().trim();
      if (query[0] !== "[") {
        query = "[" + query + "]";
      }
      args = {};
      if (this.model.get("inputState") === "auto") {
        if (_.isArray(this.inputs)) {
          try {
            args = edn.encode(this._populateVector(this.inputs));
          } catch (e) {
            console.log(e);
          }
        }
      } else {
        args = this.model.get("input", "");
      }
      self.$cols.html("");
      self.$rows.html("");
      self.$queryMsg.text("Querying");
      return $.get("/api/query", {
        query: query,
        args: args
      }, function(result) {
        var cell, col, dataTypes, i, row, sym, tr, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        if ((_.isArray(result)) && (_.size(result) > 0)) {
          self.$queryMsg.html("");
          if (self.findSymbols.length === ((_ref = result[0]) != null ? _ref.length : void 0)) {
            self.$cols.append(tr = bling("tr"));
            dataTypes = [];
            _ref1 = self.findSymbols;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              sym = _ref1[_i];
              dataTypes.push(self.knownSymbols[sym]);
              tr.bappend("td", {
                text: sym
              });
            }
          }
          for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
            row = result[_j];
            self.$rows.append(tr = bling("tr"));
            for (i = _k = 0, _len2 = row.length; _k < _len2; i = ++_k) {
              col = row[i];
              tr.append(cell = bling("td", {
                text: col
              }));
              if ((_ref2 = dataTypes[i]) === ":db/id" || _ref2 === ":db.type/ref") {
                (function(col) {
                  var _this = this;
                  return cell.addClass("idlink").on({
                    click: function(e) {
                      return DatomicIsm.fetchEntity(col, e);
                    }
                  });
                })(col);
              }
            }
          }
        } else {
          self.$queryMsg.text("No Results");
        }
        self.$results.show();
        return self.sizeCols();
      });
    };

    QueryView.prototype.render = function() {
      var editor, oldValue, self, wrapper,
        _this = this;
      QueryView.__super__.render.call(this);
      DatomicIsm.schema.on("refreshed", function() {
        _this.parseQuery();
        return _this.runQuery();
      });
      self = this;
      this.inputs = false;
      this.model.get("inputState", "auto");
      this.$el.bappend(".@main textarea.@editorTextarea, .@details textarea.manualInput, .@inputs, .@buttons button.@inputToggle, button.query", {
        self: this
      }, function() {
        var _this = this;
        this.manualInput.val(self.model.get("input", ""));
        self.$manualInput = CodeMirror.fromTextArea(this.manualInput.get(0), {
          matchBrackets: true,
          extraKeys: {
            "Ctrl-Space": "autocomplete",
            "<": function() {
              return console.log("called");
            }
          },
          mode: "datomic",
          onChange: function() {
            return self.model.set("input", self.$manualInput.getValue());
          }
        });
        self.$manualInputWrapper = $(self.$manualInput.getWrapperElement());
        this.query.text("Query").on({
          click: function() {
            return self.runQuery();
          }
        });
        return this.inputToggle.text("manual input").on({
          click: function() {
            if (self.model.get("inputState") === "auto") {
              self.model.set("inputState", "manual");
            } else {
              self.model.set("inputState", "auto");
            }
            return self.drawInputs();
          }
        });
      });
      this.$details.resizable({
        containment: "parent",
        handles: "n,s",
        resize: function() {
          return self.sizeCols();
        },
        stop: function() {
          self.sizeCols();
          return self.model.set("midPaneHeight", self.$details.height());
        }
      });
      this.$details.draggable({
        containment: "parent",
        axis: "y",
        drag: function() {
          return self.sizeCols();
        },
        stop: function() {
          self.sizeCols();
          return self.model.set("midPaneTop", self.$details.position().top);
        }
      });
      this.$details.css({
        position: "absolute",
        top: this.model.get("midPaneTop", 150),
        height: this.model.get("midPaneHeight", 33)
      }).after(bling(".@results table.@cols, .@rowsWrapper .@queryMsg, table.@rows", {
        self: self
      }));
      this.$el.resizable({
        resize: function() {
          return _this.drawInputs();
        }
      });
      oldValue = "";
      this.knownKeywords = {
        ":find": true,
        ":in": true,
        ":where": true
      };
      this.knownSymbols = {};
      this.findSymbols = [];
      editor = this.editor = CodeMirror.fromTextArea(this.$editorTextarea.get(0), {
        matchBrackets: true,
        mode: {
          name: "datomic",
          hooks: {
            "?": function(symbol) {
              if (_this.knownSymbols[symbol] != null) {
                return " symbol" + (kosherName(symbol));
              }
              return " symbol" + (kosherName(symbol)) + " missing";
            },
            ":": function(keyword) {
              if (_this.knownKeywords[keyword] != null) {
                return " keyword";
              }
              if ($("." + (kosherName(keyword))).length) {
                return " keyword";
              }
              if (DatomicIsm.schema.getAttribute(keyword)) {
                return " keyword";
              }
              return " keyword missing";
            }
          }
        },
        onChange: function() {
          var newValue;
          newValue = editor.getValue();
          if (oldValue === newValue) {
            return;
          }
          _this.model.set("query", newValue);
          _this.parseQuery();
          oldValue = newValue;
          return _this.refresh();
        }
      });
      wrapper = editor.getWrapperElement();
      self.$wrapper = $(wrapper).on({
        mouseenter: function() {
          return $("." + (kosherName($(this).text()))).addClass("tokenActive");
        },
        mouseleave: function() {
          return $("." + (kosherName($(this).text()))).removeClass("tokenActive");
        },
        mousedown: function(e) {
          var el, existingAttr;
          el = $(this);
          if (el.hasClass("cm-missing")) {
            return DatomicIsm.addAttribute(el.text()).$el.css({
              position: "absolute",
              left: self.$el.offset().left + me.width() + 10,
              top: self.$el.offset().top + 10
            });
          } else {
            e.stopPropagation();
            if (existingAttr = DatomicIsm.schema.getAttribute(el.text())) {
              return DatomicIsm.addWidget(Browser, BrowserView, {
                left: e.pageX,
                top: e.pageY
              }, void 0, existingAttr.paths);
            }
          }
        }
      }, ".cm-atom");
      $(wrapper).on({
        mouseenter: function() {
          return $(".cm-symbol" + (kosherName($(this).text())), self.$wrapper).addClass("tokenActive");
        },
        mouseleave: function() {
          return $(".cm-symbol" + (kosherName($(this).text())), self.$wrapper).removeClass("tokenActive");
        }
      }, ".cm-symbol");
      this.drawInputs();
      return this.sizeCols();
    };

    return QueryView;

  })(Widget);

  Transact = (function(_super) {

    __extends(Transact, _super);

    function Transact() {
      return Transact.__super__.constructor.apply(this, arguments);
    }

    return Transact;

  })(Model);

  TransactView = (function(_super) {

    __extends(TransactView, _super);

    function TransactView() {
      return TransactView.__super__.constructor.apply(this, arguments);
    }

    TransactView.prototype.title = "Transact";

    TransactView.prototype.className = "transact";

    TransactView.prototype.txcols = [":e", ":a", ":v", ":tx", ":added"];

    TransactView.prototype.sizeRows = function() {
      var avail, bpos, tbarHeight;
      tbarHeight = this.$handleBar.outerHeight();
      bpos = this.$buttons.position().top - tbarHeight;
      avail = this.$el.outerHeight() - tbarHeight;
      this.$wrapper.css({
        height: bpos
      });
      $(".CodeMirror-scroll", this.$wrapper).css({
        height: bpos
      });
      return this.$results.css({
        height: avail - (bpos + this.$buttons.height() + 19)
      });
    };

    TransactView.prototype.refresh = function() {
      var cur;
      cur = this.editor.getCursor();
      this.editor.setValue(this.editor.getValue());
      return this.editor.setCursor(cur);
    };

    TransactView.prototype.render = function() {
      var self,
        _this = this;
      TransactView.__super__.render.call(this);
      self = this;
      this.$el.bappend(".main textarea, .buttons button.transact", function() {
        var _this = this;
        self.editor = CodeMirror.fromTextArea(this.textarea.get(0), {
          matchBrackets: true,
          mode: {
            name: "datomic",
            hooks: {
              ":": function(keyword) {
                if (keyword === ":db/id") {
                  return " keyword";
                }
                if (DatomicIsm.schema.getAttribute(keyword)) {
                  return " keyword";
                }
                return " keyword missing";
              }
            }
          },
          onChange: function() {
            return self.model.set("input", self.editor.getValue());
          }
        });
        self.$wrapper = $(self.editor.getWrapperElement());
        self.$buttons = this.buttons.draggable({
          axis: "y",
          containment: "parent",
          drag: function() {
            return self.sizeRows();
          },
          stop: function() {
            self.sizeRows();
            return self.model.set("midPaneTop", self.$buttons.position().top);
          }
        });
        self.$buttons.css({
          position: "absolute",
          top: self.model.get("midPaneTop", 150)
        });
        this.buttons.after(self.$results = bling("pre.results"));
        return this.transact.text("Transact").on({
          click: function() {
            self.$results.text("transacting");
            return DatomicIsm.connection.transact(self.editor.getValue(), function(result) {
              return self.$results.html(bling("table thead, tbody", function() {
                var attr, f, htr, tx, _i, _j, _len, _len1, _ref, _ref1, _results;
                this.thead.append(htr = bling("tr"));
                _ref = self.txcols;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  f = _ref[_i];
                  htr.bappend("td", {
                    text: f
                  });
                }
                _ref1 = result[":tx-data"];
                _results = [];
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  tx = _ref1[_j];
                  attr = false;
                  _results.push(this.tbody.append(bling("tr", function() {
                    var _k, _len2, _ref2, _results1,
                      _this = this;
                    _ref2 = self.txcols;
                    _results1 = [];
                    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                      f = _ref2[_k];
                      _results1.push((function(f, tx) {
                        var cell, vattr;
                        _this.tr.append(cell = bling("td", {
                          text: tx[f]
                        }));
                        if (f === ":a") {
                          attr = DatomicIsm.schema.getAttributeById(tx[f]);
                          cell.text(attr.value[":db/ident"]);
                        }
                        if (f === ":v") {
                          vattr = DatomicIsm.schema.getAttributeById(tx[f]);
                          if (vattr) {
                            cell.text(vattr.value[":db/ident"]);
                          }
                        }
                        if ((f === ":e" || f === ":a" || f === ":tx") || (f === ":v" && attr && (attr.value[":db/valueType"] === ":db.type/ref"))) {
                          return cell.addClass("idlink").on({
                            click: function(e) {
                              return DatomicIsm.fetchEntity(tx[f], e);
                            }
                          });
                        }
                      })(f, tx));
                    }
                    return _results1;
                  })));
                }
                return _results;
              }));
            });
          }
        });
      });
      this.$el.resizable({
        resize: function() {
          return _this.sizeRows();
        }
      });
      self.$wrapper.on({
        mousedown: function(e) {
          var el, existingAttr;
          el = $(this);
          if (!el.hasClass("cm-missing")) {
            e.stopPropagation();
            if (existingAttr = DatomicIsm.schema.getAttribute(el.text())) {
              return DatomicIsm.fetchBrowser(existingAttr.paths, e);
            }
          }
        }
      }, ".cm-atom");
      return this;
    };

    TransactView.prototype.postAppend = function() {
      var _this = this;
      this.sizeRows();
      this.editor.setValue(this.model.get("input", ""));
      return DatomicIsm.schema.on("refreshed", function() {
        return _this.refresh();
      });
    };

    return TransactView;

  })(Widget);

  Resource = (function(_super) {

    __extends(Resource, _super);

    function Resource() {
      return Resource.__super__.constructor.apply(this, arguments);
    }

    Resource.prototype.init = function() {
      this.set("attributes", {});
      return this.set("children", {});
    };

    Resource.prototype.addAttribute = function(name, attr) {
      var attributes;
      attributes = this.get("attributes");
      attributes[name] = attr;
      this.set("attributes", attributes);
      return this;
    };

    Resource.prototype.getChild = function(name) {
      var children;
      children = this.get("children");
      if (children[name] == null) {
        return false;
      }
      return children[name];
    };

    Resource.prototype.addChild = function(name, val) {
      var children;
      children = this.get("children");
      children[name] = val;
      this.set("children", children);
      return this;
    };

    return Resource;

  })(Model);

  Schema = (function(_super) {

    __extends(Schema, _super);

    function Schema() {
      return Schema.__super__.constructor.apply(this, arguments);
    }

    Schema.prototype.loaded = false;

    Schema.prototype.init = function() {
      this.set("root", new Resource({
        name: "root",
        path: "root"
      }));
      this.attrById = {};
      return this.nsByName = {};
    };

    Schema.prototype.whenLoaded = function(cb) {
      if (this.loaded) {
        return cb(this);
      }
      return this.once("refreshed", cb);
    };

    Schema.prototype.getAttribute = function(keyword) {
      var att, ns, r, resource, _ref;
      if (!keyword || (keyword.split == null)) {
        return;
      }
      _ref = keyword.slice(1).split("/"), ns = _ref[0], att = _ref[1];
      if (resource = this.nsByName[ns]) {
        if (resource.data.attributes[att] != null) {
          return {
            type: resource.type,
            value: resource.data.attributes[att],
            paths: {
              resource: r = "resource-" + (kosherName(ns)),
              attribute: "" + r + "-attr-" + (kosherName(att))
            }
          };
        }
      }
      return false;
    };

    Schema.prototype.getAttributeById = function(id) {
      var attr;
      if (attr = this.attrById[id]) {
        return this.getAttribute(attr[":db/ident"]);
      } else {
        return false;
      }
    };

    Schema.prototype.getResource = function(name) {
      var child, part, parts, path, resource, _i, _len, _ref;
      parts = name.split(".");
      resource = this.get("root");
      path = [];
      _ref = name.split(".");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        part = _ref[_i];
        path.push(part);
        if (!(child = resource.getChild(part))) {
          resource.addChild(part, resource = new Resource({
            name: part,
            path: path.join(".")
          }));
          this.nsByName[path.join(".")] = resource;
        } else {
          resource = child;
        }
      }
      return resource;
    };

    Schema.prototype.getNamespace = function(name) {
      var attr, details, ns, resource, _ref;
      if (resource = this.nsByName[name]) {
        if (resource.type === "enum") {
          ns = new Enum({
            name: name
          }, false);
        } else {
          ns = new Namespace({
            name: name
          }, false);
        }
        ns.data[":db/id"] = resource.data[":db/id"];
        _ref = resource.get("attributes");
        for (name in _ref) {
          details = _ref[name];
          attr = new Attribute(details);
          attr.set("name", name);
          ns.attributes.push(attr);
        }
        return ns;
      } else {
        throw "unknown namespace " + name;
      }
    };

    Schema.prototype.add = function(attr, type) {
      var attName, ns, resource, _ref;
      this.attrById[attr[":db/id"]] = attr;
      _ref = attr[":db/ident"].slice(1).split("/"), ns = _ref[0], attName = _ref[1];
      resource = this.getResource(ns).addAttribute(attName, attr);
      resource.type = type;
      resource.data[":db/id"] = attr[":db/id"];
      return this;
    };

    Schema.prototype.refresh = function() {
      var self;
      self = this;
      this.init();
      return $.get("/api/query", {
        query: "[:find ?e :where [:db.part/db :db.install/attribute ?e]]"
      }, function(packed) {
        var attributes, e, _i, _len;
        attributes = {};
        for (_i = 0, _len = packed.length; _i < _len; _i++) {
          e = packed[_i];
          attributes[e[0]] = true;
        }
        return $.get("/api/query", {
          query: "[:find ?e :where [?e :db/ident]]"
        }, function(items) {
          var checkDone, count, item, _j, _len1, _results;
          count = items.length;
          checkDone = function() {
            count--;
            self.loaded = true;
            if (!count) {
              return self.emit("refreshed");
            }
          };
          _results = [];
          for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
            item = items[_j];
            _results.push((function(item) {
              return $.get("/api/entity/" + item[0], function(attr) {
                self.add(attr, attributes[item] ? "attribute" : "enum");
                return checkDone();
              });
            })(item));
          }
          return _results;
        });
      });
    };

    return Schema;

  })(Model);

  Browser = (function(_super) {

    __extends(Browser, _super);

    function Browser() {
      return Browser.__super__.constructor.apply(this, arguments);
    }

    return Browser;

  })(Model);

  BrowserView = (function(_super) {

    __extends(BrowserView, _super);

    BrowserView.prototype.title = "Browser";

    BrowserView.prototype.className = "browser";

    function BrowserView(model, id) {
      var _this = this;
      this.model = model;
      this.id = id;
      BrowserView.__super__.constructor.call(this, this.model, this.id);
      this.schema = DatomicIsm.schema;
      this.drawAll();
      this.schema.on("refreshed", function() {
        return _this.drawAll();
      });
    }

    BrowserView.prototype.render = function() {
      var self,
        _this = this;
      BrowserView.__super__.render.call(this);
      self = this;
      this.$el.bappend(".cols .col.resources, .col.members, .col.@details", {
        self: self
      }, function() {
        self.$col = this.col;
        this.resources.append(self.$resources = bling("ul"));
        return this.members.append(self.$members = bling("ul"));
      });
      return this.$widget.resizable({
        resize: function() {
          return self.sizeCols();
        }
      });
    };

    BrowserView.prototype.sizeCols = function() {
      var width;
      this.$col.css({
        height: this.$widget.outerHeight() - this.$handle.outerHeight() - 18
      });
      return this.$details.css({
        top: 0,
        left: width = this.$resources.outerWidth() + this.$members.outerWidth() + 3,
        width: this.$widget.outerWidth() - width
      });
    };

    BrowserView.prototype.postAppend = function() {
      return this.sizeCols();
    };

    BrowserView.prototype.drawResource = function(resource, parent, indent) {
      var child, down, els, expanded, fullheight, hasKids, kname, name, right, self, _ref;
      if (indent == null) {
        indent = 0;
      }
      self = this;
      kname = "resource-" + (kosherName(resource.get("path")));
      right = "&#x25BA;";
      down = "&#x25BC;";
      els = {};
      parent.bappend("li .@entry, ul.@children", {
        self: els
      }, function() {
        var _this = this;
        this.entry.text(resource.get("name"));
        this.entry.css({
          paddingLeft: "" + indent + "em"
        });
        this.entry.addClass(kname);
        if (resource.type) {
          this.entry.addClass("type-" + resource.type);
        }
        this.entry.draggable({
          helper: "clone",
          appendTo: "body",
          delay: 200,
          start: function(evt, ui) {
            return ui.helper.css({
              paddingLeft: 5,
              zIndex: 300
            });
          },
          stop: function(evt, ui) {
            var model, view;
            model = self.schema.getNamespace(resource.get("path"));
            if (resource.type === "enum") {
              view = new EnumView(model);
            } else {
              view = new NamespaceView(model);
              model.fetchRecords();
            }
            view.$el.appendTo("body");
            view.$el.css({
              position: "absolute",
              left: ui.position.left,
              top: ui.position.top
            });
            if (typeof view.saveState === "function") {
              view.saveState();
            }
            view.raiseToTop();
            return DatomicIsm.map.drawNodes();
          }
        });
        return this.entry.on({
          click: function() {
            self.model.set("attribute", false);
            self.model.set("resource", kname);
            $(".entry", self.$resources).removeClass("active");
            _this.entry.addClass("active");
            return self.drawMembers(kname, resource.get("attributes"));
          }
        });
      });
      hasKids = false;
      _ref = resource.get("children");
      for (name in _ref) {
        child = _ref[name];
        hasKids = true;
        this.drawResource(child, els.$children, indent + 1);
      }
      if ((parent !== this.$resources) && (!this.selected(kname))) {
        fullheight = els.$children.height();
        els.$children.css({
          height: 0
        });
      }
      if (hasKids) {
        expanded = false;
        return els.$entry.prepend(bling("span.@arrow", {
          self: els,
          html: right,
          on: {
            click: function(e) {
              e.stopPropagation();
              if (expanded) {
                els.$arrow.html(right);
                expanded = false;
                fullheight = els.$children.height();
                return els.$children.css({
                  height: 0
                });
              } else {
                els.$arrow.html(down);
                expanded = true;
                return els.$children.css({
                  height: "auto"
                });
              }
            }
          }
        }));
      } else {
        return els.$entry.prepend(bling("span", {
          html: "&nbsp;"
        }));
      }
    };

    BrowserView.prototype.drawMembers = function(kname, members) {
      var name, self, val, _fn;
      self = this;
      this.$details.html("");
      this.$members.html("");
      _fn = function(name, val) {
        return self.$members.bappend("li .entry", function() {
          var akname,
            _this = this;
          this.entry.text(name);
          akname = kname + ("-attr-" + (kosherName(name)));
          this.entry.addClass(akname);
          this.entry.draggable({
            helper: "clone",
            appendTo: "body",
            delay: 200,
            start: function(evt, ui) {
              return ui.helper.css({
                paddingLeft: 5,
                zIndex: 300
              });
            },
            stop: function(evt, ui) {
              return DatomicIsm.fetchEntity(val[":db/id"], evt);
            }
          });
          this.entry.on({
            click: function() {
              self.model.set("attribute", akname);
              $(".entry", self.$members).removeClass("active");
              _this.entry.addClass("active");
              return self.drawDetails(val);
            }
          });
          if (akname === self.selectedAttribute) {
            return this.entry.click();
          }
        });
      };
      for (name in members) {
        val = members[name];
        _fn(name, val);
      }
      self.sizeCols();
      return this;
    };

    BrowserView.prototype.drawDetails = function(detail) {
      var dn, dv, self;
      self = this;
      self.$details.html("");
      self.sizeCols();
      for (dn in detail) {
        dv = detail[dn];
        if (dn !== ":db/doc") {
          self.$details.bappend(".detail label, span.val", function() {
            this.label.text(_.last(dn.split("/")));
            return this.val.text(dv);
          });
        }
      }
      if (detail[":db/doc"] != null) {
        return self.$details.bappend(".detail.doc label, .val", function() {
          this.label.text("doc");
          return this.val.text(detail[":db/doc"]);
        });
      }
    };

    BrowserView.prototype.selected = function(name) {
      return (this.selectedPath != null) && this.selectedPath.indexOf(name) !== -1;
    };

    BrowserView.prototype.drawAll = function() {
      var path;
      path = this.model.data;
      this.$resources.html("");
      this.$members.html("");
      this.$details.html("");
      this.selectedPath = path.resource;
      this.selectedAttribute = path.attribute;
      this.drawResource(this.schema.get("root"), this.$resources);
      this.sizeCols();
      if (path.resource) {
        return $("." + path.resource, this.$el).click();
      }
    };

    return BrowserView;

  })(Widget);

  Note = (function(_super) {

    __extends(Note, _super);

    function Note() {
      return Note.__super__.constructor.apply(this, arguments);
    }

    Note.prototype.description = function() {
      return this.get("note", "");
    };

    return Note;

  })(Model);

  NoteView = (function(_super) {

    __extends(NoteView, _super);

    function NoteView() {
      return NoteView.__super__.constructor.apply(this, arguments);
    }

    NoteView.prototype.title = "Note";

    NoteView.prototype.className = "note";

    NoteView.prototype.sizeInput = function() {
      var size;
      size = {
        height: this.$el.height() - 10,
        width: this.$el.width() - 10
      };
      this.$wrapper.css(size);
      $(".CodeMirror-scroll", this.$wrapper).css(size);
      return this.$parsed.css(size);
    };

    NoteView.prototype.render = function() {
      var self,
        _this = this;
      NoteView.__super__.render.call(this);
      self = this;
      this.$handle.replaceWith(bling("textarea.@note, .@parsed", {
        self: self
      }));
      this.editor = CodeMirror.fromTextArea(this.$note.get(0), {
        mode: {
          name: "markdown"
        },
        lineWrapping: true,
        onChange: function() {
          return _this.model.set("note", _this.editor.getValue());
        },
        onBlur: function() {
          _this.$wrapper.hide();
          _this.parseMedia();
          return _this.$parsed.show();
        }
      });
      this.$wrapper = $(this.editor.getWrapperElement());
      this.$wrapper.hide();
      this.$widgetNameInput.remove();
      this.$el.resizable();
      this.$el.on("resize.Note", function() {
        return _this.sizeInput();
      });
      this.$el.on({
        dblclick: function() {
          _this.$parsed.hide();
          _this.$wrapper.show();
          _this.editor.focus();
          return _this.editor.setValue(_this.model.get("note", ""));
        }
      });
      return this;
    };

    NoteView.prototype.parseMedia = function() {
      return this.$parsed.html(markdown.makeHtml(this.model.get("note", "")));
    };

    NoteView.prototype.postAppend = function() {
      this.sizeInput();
      this.editor.setValue(this.model.get("note", ""));
      return this.parseMedia();
    };

    NoteView.prototype.postDrop = function() {
      return this.$el.trigger("dblclick");
    };

    return NoteView;

  })(Widget);

  Sketch = (function(_super) {

    __extends(Sketch, _super);

    function Sketch() {
      return Sketch.__super__.constructor.apply(this, arguments);
    }

    return Sketch;

  })(Model);

  SketchView = (function(_super) {

    __extends(SketchView, _super);

    function SketchView() {
      return SketchView.__super__.constructor.apply(this, arguments);
    }

    SketchView.prototype.title = "Sketch";

    SketchView.prototype.className = "sketch";

    SketchView.prototype.sizeRows = function() {
      this.$canvas.prop({
        width: this.$el.outerWidth(),
        height: this.$el.outerHeight() - (this.$handleBar.outerHeight() + this.$tools.outerHeight())
      });
      this.sketch.clear();
      this.sketch["import"](this.model.get("objs", [])).draw();
      this.$activeColor.css({
        background: this.model.get("color", "rgb(0,0,0)")
      });
      return this.$sizeInput.trigger("change");
    };

    SketchView.prototype.render = function() {
      var keepOnTop, noBg, self,
        _this = this;
      self = this;
      SketchView.__super__.render.call(this);
      this.$el.resizable({
        stop: function() {
          return _this.sizeRows();
        }
      });
      this.$el.append(bling(".main .@tools, @canvas", {
        self: self
      }));
      this.$tools.append(labelPair("size", (this.$sizeInput = comboInput({
        0.5: "small",
        1: "normal",
        4: "medium",
        8: "large",
        10: "huge"
      }, this.model, "size"))), bling("button", {
        text: "clear",
        on: {
          click: function() {
            _this.model.set("objs", [], true);
            return _this.sketch.clear();
          }
        }
      }), keepOnTop = bling("button", {
        html: "[" + (this.model.get("keepOnTop") ? "x" : "&nbsp;") + "] keep on top",
        on: {
          click: function() {
            if (_this.model.get("keepOnTop")) {
              _this.model.set("keepOnTop", false);
              keepOnTop.html("[&nbsp;] keep on top");
              return _this.$el.removeClass("keepOnTop");
            } else {
              _this.model.set("keepOnTop", true);
              keepOnTop.html("[x] keep on top");
              return _this.$el.addClass("keepOnTop");
            }
          }
        }
      }), bling("button", {
        text: "hide chrome",
        on: {
          click: function() {
            _this.$el.addClass("nochrome");
            _this.model.set("hidechrome", true);
            _this.sizeRows();
            return _this.$showChrome.uncloak();
          }
        }
      }), noBg = bling("button", {
        html: "[" + (this.model.get("nobackground") ? "x" : "&nbsp;") + "] no background",
        on: {
          click: function() {
            if (_this.model.get("nobackground")) {
              _this.model.set("nobackground", false);
              return noBg.html("[&nbsp;] no background");
            } else {
              _this.model.set("nobackground", true);
              return noBg.html("[x] no background");
            }
          }
        }
      }));
      bling("span.@activeColor", {
        self: self,
        appendTo: this.$tools
      });
      this.$el.append(bling("button.@showChrome", {
        self: self
      }));
      this.$activeColor.on({
        click: function(e) {
          var picker, pickerHolder;
          pickerHolder = bling(".pickerHolder button.@ok", {
            appendTo: "body"
          }, function() {
            var _this = this;
            return this.ok.text("ok").on({
              click: function() {
                return _this.pickerHolder.remove();
              }
            });
          });
          picker = new ColorPicker;
          pickerHolder.prepend(picker.el).css({
            position: "absolute",
            left: e.pageX,
            top: e.pageY,
            zIndex: 6000
          });
          picker.color(self.model.get("color", "rgb(0,0,0)"));
          return picker.on("change", function(color) {
            self.$activeColor.css({
              background: color
            });
            return self.model.set("color", color.toString());
          });
        }
      });
      this.sketch = sketch(this.$canvas.get(0));
      this.model.on("change", function() {
        _this.sketch.size(_this.model.get("size", 1.5));
        _this.sketch.color(_this.model.get("color", "rgb(0,0,0)"));
        _this.sketch.opacity(1);
        if (_this.model.get("nobackground")) {
          _this.sketch.backgroundColor("rgba(255,255,255,0)");
        } else {
          _this.sketch.backgroundColor("rgba(255,255,255,1)");
        }
        return _this.sketch.draw();
      });
      this.model.emit("change");
      if (this.model.get("keepOnTop")) {
        this.$el.addClass("keepOnTop");
      }
      if (this.model.get("hidechrome")) {
        this.$el.addClass("nochrome");
      }
      this.$sizeInput.val(this.model.get("size", 1.5));
      this.$el.on("drag.start", function() {
        $(".pickerHolder").remove();
        return _this.$canvas.hide();
      });
      this.$el.on("drag.stop", function() {
        return _this.$canvas.hide().show();
      });
      this.$showChrome.cloak().text("show chrome").on({
        click: function() {
          _this.model.set("hidechrome", false);
          _this.$el.removeClass("nochrome");
          _this.$el.trigger("resize");
          return _this.sizeRows();
        }
      });
      this.$el.on({
        mouseenter: function() {
          if (_this.model.get("hidechrome")) {
            return _this.$showChrome.uncloak();
          }
        },
        mouseleave: function() {
          if (_this.model.get("hidechrome")) {
            return _this.$showChrome.cloak();
          }
        }
      });
      this.$canvas.on({
        mouseup: function() {
          return _this.model.set("objs", _this.sketch["export"](), true);
        }
      });
      return this;
    };

    SketchView.prototype.postAppend = function() {
      return this.sizeRows();
    };

    return SketchView;

  })(Widget);

  Datom = (function(_super) {

    __extends(Datom, _super);

    function Datom() {
      return Datom.__super__.constructor.apply(this, arguments);
    }

    return Datom;

  })(Model);

  DatomView = (function(_super) {

    __extends(DatomView, _super);

    function DatomView() {
      return DatomView.__super__.constructor.apply(this, arguments);
    }

    DatomView.prototype.title = "Datom";

    DatomView.prototype.className = "datom";

    DatomView.prototype.render = function() {
      var self,
        _this = this;
      self = this;
      DatomView.__super__.render.call(this);
      DatomicIsm.connection.getEntity(self.model.get("entityId"), function(entity) {
        var details;
        _this.$el.append(details = bling(".details"));
        return details.append(labelPair("Entity", _this.model.get("entityId")), labelPair("Attribute", _this.model.get("attribute")), labelPair("Value", entity[_this.model.get("attribute")]));
      });
      return this.$el.resizable();
    };

    return DatomView;

  })(Widget);

  Rules = (function(_super) {

    __extends(Rules, _super);

    function Rules() {
      return Rules.__super__.constructor.apply(this, arguments);
    }

    Rules.prototype.init = function() {
      return this.on("change", function() {
        return DatomicIsm.bus.emit("rulesChanged");
      });
    };

    return Rules;

  })(Model);

  RulesView = (function(_super) {

    __extends(RulesView, _super);

    function RulesView() {
      return RulesView.__super__.constructor.apply(this, arguments);
    }

    RulesView.prototype.title = "Rules";

    RulesView.prototype.className = "rules";

    RulesView.instances = {};

    RulesView.prototype.init = function() {
      RulesView.instances[this.id] = this;
      return DatomicIsm.bus.emit("rulesChanged");
    };

    RulesView.prototype.close = function() {
      this.model.remove();
      delete RulesView.instances[this.id];
      DatomicIsm.bus.emit("rulesChanged");
      return RulesView.__super__.close.call(this);
    };

    RulesView.prototype.sizeRows = function() {
      var height;
      height = this.$el.outerHeight() - this.$handleBar.outerHeight();
      this.$wrapper.css({
        height: height
      });
      return $(".CodeMirror-scroll", this.$wrapper).css({
        height: height
      });
    };

    RulesView.prototype.refresh = function() {
      var cur;
      cur = this.editor.getCursor();
      this.editor.setValue(this.editor.getValue());
      return this.editor.setCursor(cur);
    };

    RulesView.prototype.render = function() {
      var self,
        _this = this;
      self = this;
      RulesView.__super__.render.call(this);
      this.$widget.bappend(".main textarea", function() {
        var _this = this;
        self.editor = CodeMirror.fromTextArea(this.textarea.get(0), {
          matchBrackets: true,
          mode: {
            name: "datomic",
            hooks: {
              ":": function(keyword) {
                if (keyword === ":db/id") {
                  return " keyword";
                }
                if (DatomicIsm.schema.getAttribute(keyword)) {
                  return " keyword";
                }
                return " keyword missing";
              }
            }
          },
          onChange: function() {
            return self.model.set("input", self.editor.getValue());
          }
        });
        self.$wrapper = $(self.editor.getWrapperElement());
        return self.$wrapper.on({
          mousedown: function(e) {
            var el, existingAttr;
            el = $(this);
            if (!el.hasClass("cm-missing")) {
              e.stopPropagation();
              if (existingAttr = DatomicIsm.schema.getAttribute(el.text())) {
                return DatomicIsm.fetchBrowser(existingAttr.paths, e);
              }
            }
          }
        }, ".cm-atom");
      });
      this.sizeRows();
      return this.$el.resizable({
        stop: function() {
          return _this.sizeRows();
        }
      });
    };

    RulesView.prototype.postAppend = function() {
      var _this = this;
      this.editor.setValue(this.model.get("input", ""));
      DatomicIsm.schema.on("refreshed", function() {
        return _this.refresh();
      });
      return this.sizeRows();
    };

    return RulesView;

  })(Widget);

  Explorer = (function() {

    function Explorer(options) {
      this.surface = options.surface;
      this.selector = options.selector;
      this.nodes = {};
      this.leaves = {};
      this.leavesCount = {};
    }

    Explorer.prototype.render = function() {
      var self;
      self = this;
      this.$el = bling(".explorer .title, ul.tree", function() {
        var oldheight, shrunk,
          _this = this;
        self.$tree = this.tree;
        this.title.text("explorer");
        shrunk = false;
        oldheight = 200;
        return this.title.on({
          mousedown: function() {
            if (shrunk) {
              _this.tree.animate({
                height: oldheight
              });
              return shrunk = false;
            } else {
              oldheight = _this.tree.height();
              _this.tree.animate({
                height: 0
              });
              return shrunk = true;
            }
          }
        });
      });
      this.drawNodes();
      return this;
    };

    Explorer.prototype.drawNodes = function() {
      var self,
        _this = this;
      self = this;
      return $("" + this.surface + " " + this.selector).each(function(i, el) {
        var defaultDesc, desc, id, mapNode, model, type, view, _$el;
        _$el = $(el);
        id = _$el.attr("id");
        if (_this.nodes[id] == null) {
          model = _$el.data("model");
          view = _$el.data("view");
          type = view.__proto__.title;
          if (_this.leaves[type] == null) {
            _this.leavesCount[type] = 0;
            _this.$tree.bappend("li span, ul", function() {
              this.span.text(type);
              return self.leaves[type] = this.ul;
            });
          }
          mapNode = _$el.data("CartographicSurfaceNode");
          _this.leavesCount[type]++;
          defaultDesc = "" + type + " " + _this.leavesCount[type];
          desc = function() {
            var d;
            d = typeof model.description === "function" ? model.description() : void 0;
            if (d) {
              if (d.length > 25) {
                return d.slice(0, 22) + "...";
              } else {
                return d;
              }
            } else {
              return defaultDesc;
            }
          };
          _this.leaves[type].append(_this.nodes[id] = bling("li .desc, button.remove", function() {
            var _this = this;
            this.desc.text(desc());
            this.li.on({
              mousedown: function() {
                return $("html, body").animate({
                  scrollTop: _$el.offset().top - 100,
                  scrollLeft: _$el.offset().left - 100
                });
              },
              mouseenter: function() {
                _this.remove.uncloak();
                _$el.addClass("lit");
                return mapNode.addClass("lit");
              },
              mouseleave: function() {
                _this.remove.cloak();
                _$el.removeClass("lit");
                return mapNode.removeClass("lit");
              }
            });
            this.remove.text("x").cloak().on({
              mousedown: function(e) {
                e.stopPropagation();
                return view.close();
              }
            });
            return model.on("change", function() {
              return _this.desc.text(desc());
            });
          }));
          return _$el.on("remove.Explorer", function() {
            _this.nodes[id].remove();
            _this.leavesCount[type]--;
            if (_this.leavesCount[type] === 0) {
              _this.leaves[type].parent().remove();
              delete _this.leaves[type];
              return delete _this.leavesCount[type];
            }
          });
        }
      });
    };

    return Explorer;

  })();

  window.DatomicIsm = {
    fetchEntity: function(entityId, e) {
      return DatomicIsm.addWidget(Entity, EntityView, {
        left: e.pageX,
        top: e.pageY
      }, void 0, {
        searchBy: "byId",
        byId: entityId
      });
    },
    fetchBrowser: function(paths, e) {
      return DatomicIsm.addWidget(Browser, BrowserView, {
        left: e.pageX,
        top: e.pageY
      }, void 0, paths);
    },
    fetchDatom: function(entityId, attribute, e) {
      return DatomicIsm.addWidget(Datom, DatomView, {
        left: e.pageX,
        top: e.pageY
      }, void 0, {
        entityId: entityId,
        attribute: attribute
      });
    },
    addAttribute: function(kw, data) {
      var attribute, attributeName, namespace, namespaceName, useNamespace, view, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      if (data == null) {
        data = {
          type: ":db.type/string"
        };
      }
      _ref = kw.slice(1).split("/"), namespaceName = _ref[0], attributeName = _ref[1];
      useNamespace = false;
      _ref1 = DatomicIsm.namespaces;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        namespace = _ref1[_i];
        if (namespace.get("name") === namespaceName) {
          useNamespace = namespace;
        }
      }
      if (!useNamespace) {
        useNamespace = new Namespace({
          name: namespaceName
        });
        DatomicIsm.namespaces.push(useNamespace);
        DatomicIsm.views[useNamespace.id] = view = new NamespaceView(useNamespace);
        view.$el.appendTo("body");
      } else {
        view = DatomicIsm.views[useNamespace.id];
        _ref2 = useNamespace.attributes;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          attribute = _ref2[_j];
          if (attribute.get("name") === attributeName) {
            return;
          }
        }
      }
      data.name = attributeName;
      view.addAttribute(data);
      DatomicIsm.refreshQueries();
      if (view) {
        view.$el.css({
          position: "absolute"
        });
      }
      return view;
    },
    drawToolbar: function() {
      var $win, browserEl, connectButton, entityEl, enumEl, namespace, noteEl, queryEl, rulesEl, self, sketchEl, stopHandler, transactEl,
        _this = this;
      self = this;
      this.toolbar = (bling("ul", {
        "class": "toolbar"
      })).appendTo("body").append(browserEl = bling("li", {
        text: "browser"
      }), namespace = bling("li", {
        text: "namespace"
      }), enumEl = bling("li", {
        text: "enum"
      }), queryEl = bling("li", {
        text: "query"
      }), rulesEl = bling("li", {
        text: "rules"
      }), transactEl = bling("li", {
        text: "transact"
      }), entityEl = bling("li", {
        text: "entity"
      }), noteEl = bling("li", {
        text: "note"
      }), sketchEl = bling("li", {
        text: "sketch"
      }), connectButton = bling("button.connect", {
        text: "connect"
      }));
      connectButton.on({
        click: function() {
          var buttons, comboPlaceholder, drawDbOptions, modal;
          if ($(".connectModal").length) {
            return;
          }
          drawDbOptions = function() {
            var host, port, _ref, _ref1;
            if (((_ref = (host = self.connection.get("host"))) != null ? _ref.length : void 0) && ((_ref1 = (port = self.connection.get("port"))) != null ? _ref1.length : void 0)) {
              return self.connection.connect(function() {
                var combo;
                comboPlaceholder.html(labelPair("db", combo = dbCombo(self.connection, "db-alias")));
                return combo.on("changedValue", function(evt, val) {
                  var alias, db, _ref2;
                  _ref2 = (edn.parse(val)).at(":db/alias").split("/"), alias = _ref2[0], db = _ref2[1];
                  self.connection.set("db", db);
                  self.connection.set("alias", alias);
                  return buttons.$ok.prop("disabled", false);
                });
              });
            }
          };
          modal = bling(".connectModal.modal", function() {
            var field, input, _i, _len, _ref, _results;
            _ref = ["host", "port"];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              field = _ref[_i];
              this.modal.append(labelPair(field, input = textInput(self.connection, field)));
              _results.push(input.on("changedValue", drawDbOptions));
            }
            return _results;
          });
          modal.append(comboPlaceholder = bling("div"));
          modal.bappend("button.@ok, button.@cancel", {
            self: buttons = {}
          }, function() {
            this.cancel.text("close").on({
              click: function() {
                return modal.remove();
              }
            });
            return this.ok.prop("disabled", true).text("OK").on({
              click: function() {
                Storage.set("connection", self.connection.data);
                return self.connection.connect(function() {
                  return modal.remove();
                });
              }
            });
          });
          console.log(buttons);
          drawDbOptions();
          modal.addClass("connection");
          return modal.appendTo("body");
        }
      });
      self.connection.on("connected", function() {
        return connectButton.text("connection [connected]");
      });
      $win = $(window);
      stopHandler = function(modelClass, viewClass) {
        return function(e, ui) {
          var added, pos, _base;
          pos = {
            left: ui.position.left + $win.scrollLeft(),
            top: ui.position.top + $win.scrollTop()
          };
          added = self.addWidget(modelClass, viewClass, pos);
          return typeof (_base = added.view).postDrop === "function" ? _base.postDrop() : void 0;
        };
      };
      browserEl.draggable({
        helper: "clone",
        stop: stopHandler(Browser, BrowserView)
      });
      enumEl.draggable({
        helper: "clone",
        stop: stopHandler(Enum, EnumView)
      });
      namespace.draggable({
        helper: "clone",
        stop: stopHandler(Namespace, NamespaceView)
      });
      queryEl.draggable({
        helper: "clone",
        stop: stopHandler(Query, QueryView)
      });
      transactEl.draggable({
        helper: "clone",
        stop: stopHandler(Transact, TransactView)
      });
      entityEl.draggable({
        helper: "clone",
        stop: stopHandler(Entity, EntityView)
      });
      rulesEl.draggable({
        helper: "clone",
        stop: stopHandler(Rules, RulesView)
      });
      noteEl.draggable({
        helper: "clone",
        stop: stopHandler(Note, NoteView)
      });
      return sketchEl.draggable({
        helper: "clone",
        stop: stopHandler(Sketch, SketchView)
      });
    },
    addWidget: function(modelClass, viewClass, pos, id, data) {
      var model, view, _ref;
      if (data == null) {
        data = {};
      }
      id || (id = "widget" + (guid()));
      model = new modelClass(data);
      view = new viewClass(model, id);
      view.$el.appendTo("body");
      pos.position = "absolute";
      view.$el.css(pos);
      if (typeof view.saveState === "function") {
        view.saveState();
      }
      if (typeof view.postAppend === "function") {
        view.postAppend();
      }
      view.raiseToTop();
      if ((_ref = view.$name) != null) {
        _ref.focus();
      }
      if (typeof view.sizeTitleBar === "function") {
        view.sizeTitleBar();
      }
      this.map.drawNodes();
      this.explorer.drawNodes();
      return {
        model: model,
        view: view
      };
    },
    schemaHint: function() {
      return console.log(arguments);
    },
    init: function() {
      var added, classes, connectionData, modelClass, pos, viewClass, wid, widget, _ref,
        _this = this;
      CodeMirror.commands.autocomplete = function(cm) {
        return CodeMirror.simpleHint(cm, DatomicIsm.schemaHint);
      };
      this.bus = new Emitter;
      this.map = new CartographicSurface({
        surface: "body",
        selector: ".widget",
        scale: 0.08
      });
      this.map.render().$el.appendTo("body");
      this.explorer = new Explorer({
        surface: "body",
        selector: ".widget"
      });
      this.explorer.render().$el.appendTo("body");
      connectionData = Storage.get("connection", {});
      this.connection = new Connection(connectionData);
      this.schema = new Schema;
      this.connection.on("connected", function() {
        return _this.schema.refresh();
      });
      if (_.size(connectionData)) {
        this.connection.connect();
      }
      this.views = {};
      this.drawToolbar();
      classes = {
        BrowserView: BrowserView,
        DatomView: DatomView,
        RulesView: RulesView,
        EnumView: EnumView,
        EntityView: EntityView,
        QueryView: QueryView,
        TransactView: TransactView,
        NamespaceView: NamespaceView,
        NoteView: NoteView,
        SketchView: SketchView,
        Browser: Browser,
        Datom: Datom,
        Rules: Rules,
        Enum: Enum,
        Entity: Entity,
        Query: Query,
        Transact: Transact,
        Namespace: Namespace,
        Note: Note,
        Sketch: Sketch
      };
      _ref = Storage.get("widgets", {});
      for (wid in _ref) {
        widget = _ref[wid];
        modelClass = classes[widget["class"]];
        viewClass = classes[widget["class"] + "View"];
        pos = {
          left: widget.left,
          top: widget.top,
          width: widget.width,
          height: widget.height
        };
        added = this.addWidget(modelClass, viewClass, pos, wid, widget.data);
        added.view.$el.trigger("mouseleave");
      }
      this.map.drawNodes();
      this.explorer.drawNodes();
      $(window).scrollTop(100).scrollTop(0);
      $("body").on({
        mouseenter: function() {
          return $(".entity-" + (kosherName($(this).text()))).addClass("lit");
        },
        mouseleave: function() {
          return $(".entity").removeClass("lit");
        }
      }, ".idlink");
      /*
      $("body").draggable 
          drag: (e, ui) ->
              
      
          stop: (e, ui) ->
              $(window).scrollTop($(window).scrollTop() + (ui.position.top * -1))
              $(window).scrollLeft($(window).scrollLeft() + (ui.position.left * -1))
              ui.helper.css ui.originalPosition
      */

      return $(document).on({
        keydown: function(e) {
          var _ref1;
          if ((_ref1 = e.keyCode) === $.ui.keyCode.LEFT || _ref1 === $.ui.keyCode.RIGHT || _ref1 === $.ui.keyCode.UP || _ref1 === $.ui.keyCode.DOWN) {
            return e.preventDefault();
          }
        }
      });
    }
  };

  $(function() {
    var m, oldAppend, _fn, _i, _len, _ref;
    bling = require("shaunxcode-bling");
    CartographicSurface = require("shaunxcode-CartographicSurface");
    oldAppend = $.fn.append;
    $.fn.append = function() {
      return oldAppend.apply(this, arguments).trigger("append");
    };
    $.fn.cloak = function() {
      return $(this).css({
        visibility: "hidden"
      });
    };
    $.fn.uncloak = function() {
      return $(this).css({
        visibility: "visible"
      });
    };
    $.fn.toCenter = function() {
      var el;
      el = $(this);
      return el.css({
        left: ($(window).width() / 2) - (el.outerWidth() / 2),
        top: ($(window).height() / 2) - (el.outerHeight() / 2)
      });
    };
    _ref = ["before", "after", "append", "prepend"];
    _fn = function(m) {
      return $.fn["b" + m] = function() {
        return this[m](bling.apply({}, arguments));
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      _fn(m);
    }
    window.markdown = new Showdown.converter;
    edn.setTokenAction("keyword", function(token) {
      return token;
    });
    edn.setEncodeHandler("comment", (function(obj) {
      return obj instanceof Comment;
    }), function(obj) {
      return obj.ednEncode();
    });
    edn.setEncodeAction("object", function(obj) {
      var i, k, line, lines, max, result, v;
      result = [];
      max = _.size(obj) - 1;
      i = 0;
      for (k in obj) {
        v = obj[k];
        result.push(edn.encode(":" + k));
        result.push("" + (edn.encode(v)) + (i === max ? "" : "\n"));
        i++;
      }
      lines = ("\n{" + (result.join(" ")) + "}").split("\n");
      return ((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
          line = lines[_j];
          _results.push(" " + line);
        }
        return _results;
      })()).join("\n") + "\n";
    });
    return DatomicIsm.init();
  });

}).call(this);
